<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog-rss on Robin Lee</title>
    <link>https://robin-lee.github.io/blog/index.xml</link>
    <description>Recent content in Blog-rss on Robin Lee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Dec 2016 12:25:26 +0800</lastBuildDate>
    <atom:link href="https://robin-lee.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Working with git submodules</title>
      <link>https://robin-lee.github.io/blog/2016/12/working-with-git-submodules/</link>
      <pubDate>Thu, 29 Dec 2016 12:25:26 +0800</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2016/12/working-with-git-submodules/</guid>
      <description>

&lt;p&gt;After I did a clean install of OSX on my laptop I had to clone my blog repository and setup submodules again.
This serves as a quick reference should I need to manage submodules again.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/blog/2104-working-with-submodules&#34;&gt;GitHub: Working with submodules&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;removing&#34;&gt;Removing&lt;/h1&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;git submodule deinit &amp;lt;asubmodule&amp;gt;    
git rm &amp;lt;asubmodule&amp;gt;
&lt;span style=&#34;color: #888888&#34;&gt;# Note: asubmodule (no trailing slash)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;# or, if you want to leave it in your working tree
git rm --cached &amp;lt;asubmodule&amp;gt;
rm -rf .git/modules/&amp;lt;asubmodule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/29850029/what-is-the-current-way-to-remove-a-git-submodule&#34;&gt;Stackoverflow reference&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;adding&#34;&gt;Adding&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;# add entire gh-page repo to public folder
git submodule add -b master git@github.com:&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io.git public

# adding a repo to a path
git submodule add git@&amp;lt;github.com or bitbucket etc.&amp;gt;:&amp;lt;repo&amp;gt; &amp;lt;path like lib/billboard&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://chrisjean.com/git-submodules-adding-using-removing-and-updating/&#34;&gt;link to chrisjean&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;updating&#34;&gt;Updating&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;git submodule update --init --recursive

# or when cloning for the first
git clone --recursive &amp;lt;project url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Google DevFest 2016</title>
      <link>https://robin-lee.github.io/blog/2016/11/google-devfest-2016/</link>
      <pubDate>Sat, 05 Nov 2016 12:30:25 +0800</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2016/11/google-devfest-2016/</guid>
      <description>

&lt;h2 id=&#34;foreword&#34;&gt;Foreword&lt;/h2&gt;

&lt;p&gt;These are my rough notes from Google DevFest 2016.&lt;/p&gt;

&lt;h2 id=&#34;pre-devfest&#34;&gt;Pre-DevFest&lt;/h2&gt;

&lt;p&gt;Met Gerard from gLabs and Kai from Grab.&lt;/p&gt;

&lt;h3 id=&#34;mockable&#34;&gt;Mockable&lt;/h3&gt;

&lt;p&gt;Test http responses. Stub. Dummy object.&lt;/p&gt;

&lt;h1 id=&#34;welcome-and-gdg-sg-report&#34;&gt;Welcome and GDG-SG Report&lt;/h1&gt;

&lt;p&gt;Mr.Bharathi manages GDG-SG.&lt;/p&gt;

&lt;p&gt;Events:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I/O Extended: Recap I/O (Q3)&lt;/li&gt;
&lt;li&gt;GCP Next (Q2, cloud)&lt;/li&gt;
&lt;li&gt;Study Jams: Basic course on android. (Q1, Q4)&lt;/li&gt;
&lt;li&gt;Women Techmakers&lt;/li&gt;
&lt;li&gt;DevFest (Q4)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;google-developers-last-6-months&#34;&gt;Google Developers (last 6 months)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Firebase (database stuff transform to ecosystem)&lt;/li&gt;
&lt;li&gt;Android7.0 (Dooze, multiwindow, Vulcan API for games)&lt;/li&gt;
&lt;li&gt;GCP (Google Cloud Platform)&lt;/li&gt;
&lt;li&gt;Machine Learning and other stuff&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Facebook page is more active &lt;a href=&#34;http://bit.ly/gdg.sg&#34;&gt;http://bit.ly/gdg.sg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Firebase Pitch. Firebase Dev Summit 7th Nov Berlin Germany. Livestream available.&lt;/p&gt;

&lt;p&gt;Android Pay: SG, HK, AUS.&lt;/p&gt;

&lt;p&gt;Associate Android Developer Certification. (Google?)&lt;/p&gt;

&lt;p&gt;GCP 2017 Singapore, Sydney, Mumbai and Tokyo. Getting support.&lt;/p&gt;

&lt;p&gt;Google cloud editor. StackDriver. Chrome Payment API.&lt;/p&gt;

&lt;p&gt;Accelerated Mobile Pages (AMP). Goal: Same speed as native applications.&lt;/p&gt;

&lt;p&gt;Progressive Web Apps (PWA): Some features like push notifications faster&lt;/p&gt;

&lt;p&gt;TensorFlow 0.9: Run neural networks on device itself. iOS. Android&lt;/p&gt;

&lt;p&gt;DayDream: VR Platform&lt;/p&gt;

&lt;p&gt;Google Home: Like Alexa? But powered by Google Assistant.&lt;/p&gt;

&lt;h2 id=&#34;making-a-difference-through-technopreneurship&#34;&gt;Making a difference through Technopreneurship&lt;/h2&gt;

&lt;p&gt;Regional Director, Edmas Neo, Infocomm Investments Pte Ltd. They are a Venture Capital under ministry of finance managing a 200M fund.&lt;/p&gt;

&lt;p&gt;TAG.Pass (Methodology)&lt;/p&gt;

&lt;p&gt;Ideation -&amp;gt; Accelaration -&amp;gt; Incubation -&amp;gt; Expansion&lt;/p&gt;

&lt;p&gt;Now: with IDA to coach Startups.&lt;/p&gt;

&lt;p&gt;Framing your mind. Change perspective -&amp;gt; New solutions.&lt;/p&gt;

&lt;p&gt;NTU CAS (Career Aspiration Survery) 2010&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lt;8% Entrepreneur&lt;/li&gt;
&lt;li&gt;21% Leadership/Manager&lt;/li&gt;
&lt;li&gt;71% Professional&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stuff about technology and innovation being important and showing govt/foreign govt articles.
Epistemological Bias?&lt;/p&gt;

&lt;p&gt;17th Global startup ecosystem ranking
Innovative cities.&lt;/p&gt;

&lt;p&gt;You can also find entrepreneurs to work for: Technopreneur Action Group (TAG)&lt;/p&gt;

&lt;h2 id=&#34;making-your-cool-app-awesome&#34;&gt;Making your cool app awesome&lt;/h2&gt;

&lt;p&gt;Mr Stefan Hogendoorn from Netherlands (Google Developer Expert, Co-founder, Qlouder Amsterdam)&lt;/p&gt;

&lt;p&gt;@shogendoorn, stefan@qlouder.com.&lt;/p&gt;

&lt;h3 id=&#34;the-cool-app&#34;&gt;The Cool App&lt;/h3&gt;

&lt;p&gt;A feed search for twitter. Get twitter message by topic. Used to get a quick overview of a topic.&lt;/p&gt;

&lt;p&gt;Polymer - declaratively create a web application.&lt;/p&gt;

&lt;h4 id=&#34;architecture&#34;&gt;Architecture&lt;/h4&gt;

&lt;p&gt;Polymer client connects to python flask server which in term connects to twitter.
Good reason why the python app is inbetween (to be explained).&lt;/p&gt;

&lt;p&gt;(shows barebones app. not cool.)&lt;/p&gt;

&lt;p&gt;COOL? add Google Cloud Platform stuff.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adding interaction: Firebase (Realtime database).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Polymer client connects to &lt;em&gt;Firebase&lt;/em&gt; and to python flask server which in term connects to twitter and &lt;em&gt;Firebase&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Observation: While typing polymer pulls data from Firebase. Realtime interaction.&lt;/p&gt;

&lt;p&gt;COOLER? Machine Learning.&lt;/p&gt;

&lt;p&gt;GCP has ML stuff. Google visionary. Google photos already using google visionary api (Groups by food, people).&lt;/p&gt;

&lt;p&gt;&lt;Insert techinical difficulties showing code&gt;&lt;/p&gt;

&lt;p&gt;Gets url of image from tweet. Base64 encode it then send it to the vision API.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;At a hackathon, winning team got images from a video stream then sent to the API to determine if people in images were bored or something.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;acccelerated-mobile-pages-amp-an-overview&#34;&gt;Acccelerated Mobile Pages (AMP) - An Overview&lt;/h2&gt;

&lt;p&gt;Mr Arudea Mahartianto (Google)&lt;/p&gt;

&lt;p&gt;Shift to mobile. Messages from mother to buy groceries etc. (used to be calls? idk.)&lt;/p&gt;

&lt;p&gt;Problem: Content consumption can be frustrating.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Slow-loading pages.&lt;/li&gt;
&lt;li&gt;Unresponsive experiences.&lt;/li&gt;
&lt;li&gt;Unexpected content reflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;53% of people abandon a website that takes more than 3 seconds to load.
People also question credibility of website.&lt;/p&gt;

&lt;p&gt;We need something that is: Fast, easy to implement, mobile friendly, embrace open web, enable monetization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enter AMP&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;how-it-works&#34;&gt;How it works?&lt;/h4&gt;

&lt;p&gt;Does not allow third party javascript&amp;hellip; Okay you can use it in sandboxed amp-iframes.&lt;/p&gt;

&lt;p&gt;Limitations for a good reason:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No custom js except in sandboxed iframe&lt;/li&gt;
&lt;li&gt;No scrolling elements&lt;/li&gt;
&lt;li&gt;Max 50KB inline stylesheet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many add-ons.&lt;/p&gt;

&lt;h2 id=&#34;10-design-principles-to-make-an-additive-app&#34;&gt;10 Design Principles to Make an Additive App&lt;/h2&gt;

&lt;p&gt;Mr Borrys Hasian (Google Expert in UX/UI and a mentor for Google Launchpad Accelerator in Silicon Valley).&lt;/p&gt;

&lt;p&gt;Only 5 UI/UX google experts in SEA.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Upper limit of apps people use a month is 30 apps. - Nielsen&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Inspiration: Don norman, Dieter ram, Tom kelly&lt;/p&gt;

&lt;p&gt;What is your product about? How you should start your app design?
&amp;gt; Instagram is a simple way to capture and share the world&amp;rsquo;s moments.&lt;/p&gt;

&lt;h4 id=&#34;making-your-app-fun&#34;&gt;Making your app fun&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Rewards of the tribe - gratification from others&lt;/strong&gt;
For example: some intereaction between user and community around.&lt;/p&gt;

&lt;p&gt;Make it fun with different pleasures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Physio&lt;/li&gt;
&lt;li&gt;Socio&lt;/li&gt;
&lt;li&gt;Psycho&lt;/li&gt;
&lt;li&gt;Ideo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Rewards of the hunt (material goods, money or information)&lt;/strong&gt;
Like scrolling a feed then you reveal more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rewards of the self (mastery, completion, competency, consistency)&lt;/strong&gt;
Make them feel like an expert. How to get people to contribute content, get followers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;External Triggers&lt;/strong&gt; to get people to use your app. E.g. Facebook. Basically, marketing stratgem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conversions&lt;/strong&gt; How to bring user from beginner stage to an advanced stage.
Guided usage of the app. Start your first story. Share with friends.
Clear start screen to bring users in: &amp;ldquo;Find people you know&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Doing needs to be easier than thinking&lt;/strong&gt;. Take a photo then UI shows filter options.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Different context&lt;/strong&gt;. Drive different actions. Profile page? Prompt to take a photo for profile.&lt;/p&gt;

&lt;p&gt;Floating Action Button forces you to think what key actions are for this page. Drive user action.&lt;/p&gt;

&lt;p&gt;Many of us are creating apps without knowing whether or not it&amp;rsquo;ll be useful for the users.&lt;/p&gt;

&lt;p&gt;How to make it simple?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Antoine de Saint-Exupery quote on perfection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At Rakuten he cut off &lt;em&gt;67% of items on screen&lt;/em&gt;. Doubled conversion rate. Paradox of what to click.&lt;/p&gt;

&lt;p&gt;Nice comforting transitions. (Instagram login page on mobile)&lt;/p&gt;

&lt;h4 id=&#34;how-do-we-measure&#34;&gt;How do we measure?&lt;/h4&gt;

&lt;p&gt;Emotional Design Score. Get them to agree/disagree with qns for each of the 10 points.&lt;/p&gt;

&lt;p&gt;Visceral, Behavioural and Reflective.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Less but better&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Q: Why Instagram&amp;rsquo;s new logo is more colorful.&lt;/p&gt;

&lt;p&gt;A guess. Plain white figure ground. Then people will focus more on images. So draws attention.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Some question I didn&amp;rsquo;t catch.&lt;/em&gt;
&lt;em&gt;Some law&lt;/em&gt;. 64% of users will use the product if certain number of early adopters use the product.
Suggestion make it easy for expert user first before &lt;em&gt;simplifying for common user&lt;/em&gt;. Common users don&amp;rsquo;t know what they want.&lt;/p&gt;

&lt;p&gt;On Snapchat. Somebody didn&amp;rsquo;t find it easy but this dude is probably not in the target audience. The younger group does feel that it is instant. Compact short content.&lt;/p&gt;

&lt;p&gt;Q: User experience for chatbot.&lt;/p&gt;

&lt;p&gt;Rising customer service startup in indonesia. They are moving towards it.
He thinks its evolving to that direction. Can suggest products.&lt;/p&gt;

&lt;p&gt;Something about email. Email is a huge channel. Depends on target audience.&lt;/p&gt;

&lt;p&gt;On &lt;strong&gt;Inbox&lt;/strong&gt;. Came from Google Labs. Useful when traveling. I agree.&lt;/p&gt;

&lt;h2 id=&#34;achieving-developer-happiness-by-automating-the-android-tests-workflows&#34;&gt;Achieving developer happiness by Automating the Android Tests &amp;amp; Workflows&lt;/h2&gt;

&lt;p&gt;Mr Khang Toh (CTO, PicoCandy)&lt;/p&gt;

&lt;p&gt;Sell stickers in managing apps. If we need stickers they have SDKs. Work with Messenger, Viber, BBM, Kakao talk.&lt;/p&gt;

&lt;p&gt;In terms of development process. How do you make your team happy?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If its worth doing once, its probably worth automating it but it needs to be clean otherwise you get an automated mess.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Continuous Delivery&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do things in &lt;strong&gt;short cycles&lt;/strong&gt; and release &lt;em&gt;fast&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Key to automating: Testing, builds, distribution.&lt;/p&gt;

&lt;p&gt;3 steps to automating your tests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code Architecture: MVP (&lt;strong&gt;YES!!!&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Dependency Injection &amp;amp; Mocks: To be able to test and test well (&lt;strong&gt;YES!!!&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Automate UI Testing: eg Espresso ( T_T how to do this right?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some code.
Android code testing lab. &lt;strong&gt;I DID THIS !!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Dependency injection with build flavors.&lt;/p&gt;

&lt;p&gt;ArgumentCaptor to simulating callbacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why automate UI Testing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because it is most expensive.&lt;/p&gt;

&lt;p&gt;Increasing cost -&amp;gt;&lt;/p&gt;

&lt;p&gt;Unit -&amp;gt; Service -&amp;gt; UI&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Espresso&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Familiar Instrument testing? This different.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Continuous Delivery&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CircleCI. Jenkins used to be bad but now its a lot better.
Firebase also has a test lab.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Automate builds and distribution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using fastlane. Can get screenshots for all &lt;strong&gt;locales&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;android-pay-integration-an-implementation-overview&#34;&gt;Android Pay Integration - An Implementation Overview&lt;/h2&gt;

&lt;p&gt;Mr Kenneth Andersson (Director of Engineering, Grab)/ WEE Weing Kai (Mobile Team, Grab)&lt;/p&gt;

&lt;h3 id=&#34;android-pay-vs-traditonal-credit-card&#34;&gt;Android Pay vs Traditonal Credit Card&lt;/h3&gt;

&lt;p&gt;Stripe as gateway provider in Singapore.
Android Pays only allows one token to be charged only one time. Every transaction you need a new token
More secure.&lt;/p&gt;

&lt;h3 id=&#34;android-pay-flow&#34;&gt;Android Pay Flow&lt;/h3&gt;

&lt;p&gt;MaskedWalletRequest: Either use a fragment they provide (some button) or make your own then do a manual request (diff method call).&lt;/p&gt;

&lt;p&gt;FullWalletRequest: Can be configured to use third party gateway like Stripe or BrainTree.&lt;/p&gt;

&lt;p&gt;Both requests must be successful. Then you get a token.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Android Pay&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Scheduled as a feature work&lt;/li&gt;
&lt;li&gt;Deprioritized due to toher work&lt;/li&gt;
&lt;li&gt;Turned into a Grabathon project (Grab&amp;rsquo;s internal hackathon)&lt;/li&gt;
&lt;li&gt;Released a week later - launch in record time (24h).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A lot of support from Google team. Thumbs up. A few online meetings. 3 calls (SG, London, MountainView). Different time.&lt;/p&gt;

&lt;p&gt;Challenges:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allow user to add android pay&lt;/li&gt;
&lt;li&gt;Allow users to change card&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;To change card you need to make another MaskedWallet request. No well documented.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This flow is for physical products. A service can also be considered a physical product.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Why Android Pay? Some people prefer an international brand.&lt;/p&gt;

&lt;h2 id=&#34;under-the-hood-of-android-quick-review&#34;&gt;Under the Hood of Android - Quick Review&lt;/h2&gt;

&lt;p&gt;Mr Jason Zaman (Contributor,  Gentoo Linux)&lt;/p&gt;

&lt;p&gt;Much much lower. Slides &lt;a href=&#34;http://blog.perfinion.com/&#34;&gt;http://blog.perfinion.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Android Runtime used to be Dalvik now it is ART.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Geek Camp 2016</title>
      <link>https://robin-lee.github.io/blog/2016/10/geek-camp-2016/</link>
      <pubDate>Sat, 29 Oct 2016 10:46:49 +0800</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2016/10/geek-camp-2016/</guid>
      <description>

&lt;h2 id=&#34;schedule&#34;&gt;Schedule&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The Magic Behind Engineers.SG — Michael Cheng&lt;/li&gt;
&lt;li&gt;An Unexpected Use for a Cardboard Box: Listening to the Moon — Roland Turner&lt;/li&gt;
&lt;li&gt;Evolving Careers: How I Switched My Role from an Admin to a Javascript Developer — Leticia Choo&lt;/li&gt;
&lt;li&gt;Create a 3D Game Engine for Pebble Smartwatch — Shipeng Xu&lt;/li&gt;
&lt;li&gt;Rust: Make System Programming Great Again! — Omer Iqbal&lt;/li&gt;
&lt;li&gt;I left.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-magic-behind-engineers-sg&#34;&gt;The Magic Behind Engineers.SG&lt;/h2&gt;

&lt;p&gt;Sharing about the &lt;em&gt;magic&lt;/em&gt; behind the scenes.
@coderkungfu&lt;/p&gt;

&lt;p&gt;With Singapore Power now. &lt;a href=&#34;https://www.techinasia.com/singapore-power-sau-sheong&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Motivation: Marketing problem for engineers in Singapore.&lt;/p&gt;

&lt;p&gt;Goal: Tell more about Engineers in Singapore via Videos&lt;/p&gt;

&lt;h3 id=&#34;streamline-capture-workflow&#34;&gt;Streamline Capture Workflow&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Capture all inputs (video, screen, audio)&lt;/li&gt;
&lt;li&gt;Feed sources into a laptop via USB&lt;/li&gt;
&lt;li&gt;Post production&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;Presenter laptop -&amp;gt; Video splitter -&amp;gt; Video input

Video splitter -&amp;gt; screen capture tool, webcam, condenser(microphone)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Important to hear what speaker is saying &lt;em&gt;clearly&lt;/em&gt;. So process audio!
Shell script for processing audio: ffmpeg, SoX.&lt;/p&gt;

&lt;h3 id=&#34;humans&#34;&gt;Humans&lt;/h3&gt;

&lt;p&gt;Pre-meetup Procedures.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get permissions from organizers and presenters.&lt;/li&gt;
&lt;li&gt;Volunteers sign up for time slot.&lt;/li&gt;
&lt;li&gt;Logistics.&lt;/li&gt;
&lt;li&gt;Setup time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Organizers don&amp;rsquo;t really have a pool of volunteers they can rely on.
So it was better to setup a pool of volunteers to go around. (40+ now)&lt;/p&gt;

&lt;p&gt;OBS: Open Broadcaster Software! Yes!&lt;/p&gt;

&lt;h3 id=&#34;considerations&#34;&gt;Considerations&lt;/h3&gt;

&lt;p&gt;He wanted to avoid having the presenter download software just to be able to do a screencapture. Tried to build a workflow with QuickTime (MAC).&lt;/p&gt;

&lt;p&gt;Backup system. Why? Because it is running windows. Backup video and audio to reconstruct stuff.
Slides and audio is most important.&lt;/p&gt;

&lt;p&gt;Luggage for transporting gear. Lots of stuff and its heavy. Better to have something sturdy to transport stuff over &lt;em&gt;difficult terrain&lt;/em&gt;. Go to mustafa!&lt;/p&gt;

&lt;h3 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h3&gt;

&lt;p&gt;Seems like a mash of hardware and software is needed to get things working. He started with something then improved it over time.&lt;/p&gt;

&lt;h2 id=&#34;an-unexpected-use-for-a-cardboard-box-listening-to-the-moon&#34;&gt;An Unexpected Use for a Cardboard Box: Listening to the Moon&lt;/h2&gt;

&lt;p&gt;Satellites.&lt;/p&gt;

&lt;h3 id=&#34;satellite-orbits&#34;&gt;Satellite Orbits&lt;/h3&gt;

&lt;p&gt;Polar LEO - where most ameteur satellies are.
&lt;em&gt;LEO: Low earth orbit&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;objective&#34;&gt;Objective&lt;/h3&gt;

&lt;p&gt;Bounce satellite signals off the moon.&lt;/p&gt;

&lt;h3 id=&#34;stuff&#34;&gt;Stuff&lt;/h3&gt;

&lt;p&gt;Listen to Jupiter. Source of HF radio emissions in the solar system.&lt;/p&gt;

&lt;p&gt;You get a &amp;ldquo;nice&amp;rdquo; cup if you manage to establish 2 way communication with Mars.&lt;/p&gt;

&lt;h3 id=&#34;intermediate-steps&#34;&gt;Intermediate steps&lt;/h3&gt;

&lt;p&gt;Going from lower orbits to higher orbits.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LEO&lt;/li&gt;
&lt;li&gt;GSO/Molniya&lt;/li&gt;
&lt;li&gt;?&lt;/li&gt;
&lt;li&gt;EME&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Special satellite dish to look for reconnaisse satellite orbitting the moon. Looks at 100th of all the sounds &lt;em&gt;coming&lt;/em&gt; from the sky.
eg. Gate3way&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AA2TX&lt;/strong&gt;: Close to spec of commercial dishes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;60cm cardboard box.&lt;/li&gt;
&lt;li&gt;2400MHZ&lt;/li&gt;
&lt;li&gt;20dBi&lt;/li&gt;
&lt;li&gt;S-Band LNB/DC&lt;/li&gt;
&lt;li&gt;Any coax&lt;/li&gt;
&lt;li&gt;Amateur transceiver&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;interesting-stuff&#34;&gt;Interesting stuff&lt;/h3&gt;

&lt;p&gt;Helical structure of antenna. Polarisation.
Circular magnetic field. Better as you don&amp;rsquo;t know the orientation of the satellite.&lt;/p&gt;

&lt;p&gt;Linear structure means you got to sync them. Must point right.&lt;/p&gt;

&lt;p&gt;Signal recevied is a billionth of a watt. Cardboard box and LNA amplifiy it.
Coax loses about 30% of it.&lt;/p&gt;

&lt;p&gt;Noise is a problem.
Entire sky is emitted radiation at a very low level. It matters in this case.
Moon is freezing (here assumed to be -25C).&lt;/p&gt;

&lt;h2 id=&#34;evolving-careers-how-i-switched-my-role-from-an-admin-to-a-javascript-developer&#34;&gt;Evolving Careers: How I Switched My Role from an Admin to a Javascript Developer&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://BillHsu.github.io&#34;&gt;BillHsu.github.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Drawings.
Life story.
Bad dev practices.
Learning journey.&lt;/p&gt;

&lt;h2 id=&#34;create-a-3d-game-engine-for-pebble-smartwatch&#34;&gt;Create a 3D Game Engine for Pebble Smartwatch&lt;/h2&gt;

&lt;p&gt;Todo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generic way of rendering 3d images for Pebble&lt;/li&gt;
&lt;li&gt;Flexible&lt;/li&gt;
&lt;li&gt;High frame rate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Breakdown the problem.&lt;/p&gt;

&lt;p&gt;A smaller problem.
Demonstrate concept of being able to create a game.
Display 3D model on the watch.&lt;/p&gt;

&lt;p&gt;First. Look at hardware specs.
64 epaper.
144x168.
ST Micro STM32F439ZG 180MHz ARM (100MHz limit. Battery.)
Bluetooth Module.
Has a Lattice LP1K FPGA.&lt;/p&gt;

&lt;p&gt;Watch side APIs: C, JavaScript (JerryScript, Samsung, IoT)&lt;/p&gt;

&lt;p&gt;Phone side: JS, iOS, Android&lt;/p&gt;

&lt;p&gt;2 ways:&lt;/p&gt;

&lt;p&gt;Phone side rendering.
Render on phone then send to watch. But bluetooth is slow.&lt;/p&gt;

&lt;p&gt;Watch side rendering.
Send the 3D vertices to watch. Rendering done on watch side. But CPU not very powerful.&lt;/p&gt;

&lt;p&gt;Each pixel will be 1 byte(8bits)
144x168 = ~24 kilobytes for each image&lt;/p&gt;

&lt;p&gt;Bluetooth 2.1 max rate is 3Mbps. ~360KB/s (kilobytes). So maybe 10FPS?
But you can&amp;rsquo;t use all the bytes. Some checksum&amp;hellip; etc.&lt;/p&gt;

&lt;p&gt;Pebble max buffer size is 8KB? But he tested only could sent ~1.8KB.&lt;/p&gt;

&lt;h3 id=&#34;pebblekit-js&#34;&gt;Pebblekit JS&lt;/h3&gt;

&lt;p&gt;Create own WebGL as it is not supported.&lt;/p&gt;

&lt;p&gt;Looking at a 3d bunny made of triangles. Just add more triangles to make it more realistic.&lt;/p&gt;

&lt;p&gt;3D renderer you just need 1 function to draw a triangle then you can do anything you want.
Every 3d triangle is mapped to a 2d triangle so after all we need a function to draw a 2d triangle.
Process is called rasterization.&lt;/p&gt;

&lt;p&gt;Previous talk &amp;ldquo;A 3D renderer in JavaScript&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Sending buffer over took 8000ms while rendering took 250ms.
Reducing image resolution&amp;hellip; 400ms to send 250ms to render. So 2 FPS.&lt;/p&gt;

&lt;h2 id=&#34;rust-make-system-programming-great-again&#34;&gt;Rust: Make System Programming Great Again!&lt;/h2&gt;

&lt;p&gt;How many of you have touched systems programming since university?
Well&amp;hellip; It sucks.&lt;/p&gt;

&lt;h3 id=&#34;heartbleed&#34;&gt;Heartbleed&lt;/h3&gt;

&lt;p&gt;Buffer overflow. Missing bound check. &lt;code&gt;if length &amp;lt;  X&lt;/code&gt;.
Shellshock. Goto fail gotofail.&lt;/p&gt;

&lt;p&gt;c, c++ used to implement these libraries give you too much freedom.&lt;/p&gt;

&lt;p&gt;We are concerned about memory safety.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Buffer overflows -&amp;gt; corrupt adjacents.&lt;/li&gt;
&lt;li&gt;Buffer over-reads -&amp;gt; reveal sensitive data.&lt;/li&gt;
&lt;li&gt;Dangling Pointers -&amp;gt; address of a deleted object&lt;/li&gt;
&lt;li&gt;Double free -&amp;gt; Corrupt the heap&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;garbage-collection&#34;&gt;Garbage collection&lt;/h3&gt;

&lt;p&gt;Generational mark &amp;amp; sweep. JVM style.
Non-deterministic destruction.
Resource like video but you want to destroy a particular file. You don&amp;rsquo;t know when itll be destroyed.
Needs a lot more memory to be efficient. (3-4 times of actual application)
Sweep pass touches almost all RAM leading to power inefficiency. (Android!)
GC pauses not acceptable for hard realtime systems (Airplanes!)&lt;/p&gt;

&lt;h3 id=&#34;enter-rust&#34;&gt;Enter Rust&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;fn main() {
    println!(&amp;quot;Hello world! Easier than C! We win!&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;! mark to distinguish macro from normal method/function calls.&lt;/p&gt;

&lt;p&gt;Systems programming lang:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Safety&lt;/li&gt;
&lt;li&gt;Speed&lt;/li&gt;
&lt;li&gt;Concurrency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Immutability by default&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let x = 9;
x = 10;
//fails

let mut y = 10;
y = 5;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Strongly typed w inference&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let x: i32 = 42;
let y = 42;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vectors.
Resizable array. Store content on heap. Macros: Like C preprocessors.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let v = vec![1,2,3,4,5] // v: Vec&amp;lt;i32&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;rust-philosopy&#34;&gt;Rust philosopy&lt;/h3&gt;

&lt;p&gt;Zero cost abstractions
Zero performance cost.&lt;/p&gt;

&lt;h3 id=&#34;rust-memory-model&#34;&gt;Rust memory model&lt;/h3&gt;

&lt;h4 id=&#34;ownership&#34;&gt;Ownership&lt;/h4&gt;

&lt;p&gt;You own something. So you take care of it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fn foo() {
    // variables own the resource.
    let v = vec![1, 2, 3];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once binding goes out of scope, Rust will free the bound resources. Default behaviour.&lt;/p&gt;

&lt;p&gt;There is only ONE binding to a given resource&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let v = vec![1, 2, 3];
let v2 = v;
println!(&amp;quot;v[0] is: {}&amp;quot;, v[0]);

//error: use of moved value: v
//multiple bindings.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;ownership-move-semantics&#34;&gt;Ownership: move semantics&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;fn take(v: Vec&amp;lt;i32&amp;gt;) {

}
let v = vec![1 ,2, 3];
take(v);

//compile error. wtf?
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;let trumpVotes = vec![1, 2, 3];
let mut fakeMore = trumpVotes;
fakeMore.push(4);
// does not compile because your stack has different sizes (trumpVotes, fakeMore) for same heap address.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Primitives implement Copy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let v = 1;
let v2 = v;
println!(&amp;quot;v is :{}&amp;quot;, v);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inefficient. So not used in production.&lt;/p&gt;

&lt;p&gt;How to pass to function&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let v1 = ...
let v2 = ...

let (v1, v2, ans) = foo(v1, v2)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;borrowing&#34;&gt;Borrowing&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;fn foo(v1: &amp;amp;Vec&amp;lt;i32&amp;gt;, v2: &amp;amp;Vec&amp;lt;i32&amp;gt;) -&amp;gt; ...

let answer = foo(&amp;amp;v1, &amp;amp;v2);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;fn foo(v: &amp;amp;Vec&amp;lt;i32&amp;gt;) {
    v.push(5)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can&amp;rsquo;t mutate stuff easily.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fn main() {
    let mut x = 5;
    let y = &amp;amp;mut x;
    *y += 1;
    println!(&amp;quot;x is :{}&amp;quot;, x);
    // fails.
    // data race. println! creates an immutable reference.
    // y is mutable.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;access content of the reference.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;borrowing-rules&#34;&gt;Borrowing Rules&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Any borrow must last for a scope not greater than owner (Refence must not live longer than res they refer to)&lt;/li&gt;
&lt;li&gt;You can only have 1 mutable reference at any time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lsquo;data race&amp;rsquo;. 2 or more pointer accessing 1 memory location at the same time where at least 1 of them is writing and operations are not synchronized.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Immutability is a property of the binding not the data.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;static-vs-dynamic-dispatch&#34;&gt;Static vs Dynamic Dispatch&lt;/h3&gt;

&lt;h4 id=&#34;static&#34;&gt;Static&lt;/h4&gt;

&lt;p&gt;Dont need to manually calc address of function.
Matters because of optimizations you can do like &lt;strong&gt;inlining&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;add 3 5
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;dynamic&#34;&gt;Dynamic&lt;/h4&gt;

&lt;p&gt;Address of function has to be evaluated at compile time.&lt;/p&gt;

&lt;p&gt;By default last expression will return.&lt;/p&gt;

&lt;h4 id=&#34;stuff-1&#34;&gt;Stuff&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;u8&lt;/code&gt; is bytes.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;monomorphization&lt;/code&gt; for static dispatch. Can bloat codesize.&lt;/p&gt;

&lt;h3 id=&#34;thoughts-1&#34;&gt;Thoughts&lt;/h3&gt;

&lt;p&gt;Rust makes you fail a lot&amp;hellip; with good intentions?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL Cheatsheet</title>
      <link>https://robin-lee.github.io/blog/2016/09/mysql-cheatsheet/</link>
      <pubDate>Mon, 19 Sep 2016 15:35:25 +0800</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2016/09/mysql-cheatsheet/</guid>
      <description>&lt;p&gt;A cheatsheet. Enough said.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;show databases;

select database();

show tables;

create table cats (cid CHAR(20), name CHAR(30), breed CHAR(20), age INTEGER, cuteness REAL)

insert into cats (cid, name, breed, age, cuteness)
values (1, &#39;coolcat&#39;, &#39;garfield&#39;, 999, 3.14159265953)

delete
from cats cat
where cat.name = &#39;gary&#39;

update cats cat
set cat.age = cat.age + 1, cat.cuteness = cat.cuteness + 999
where cat.cid = 1
// where clause is applied first
// can use &amp;gt;=

create table students (sid CHAR(20),
                        name CHAR(30),
                        login CHAR(30),
                        age INTEGER,
                        gpa REAL,
                        UNIQUE (name, age),
                        CONSTRAINT StudentKey PRIMARY KEY (sid)
                        )
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Beginning Spring Boot with Gradle</title>
      <link>https://robin-lee.github.io/blog/2016/08/beginning-spring-boot-with-gradle/</link>
      <pubDate>Fri, 26 Aug 2016 16:03:00 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2016/08/beginning-spring-boot-with-gradle/</guid>
      <description>

&lt;p&gt;Spring Boot with Gradle because Maven is too verbose.&lt;/p&gt;

&lt;p&gt;When I was looking for tutorials, it seemed like using gradle with Spring Boot is the lesser walked path.
However, I think going down this path enables me to understand gradle better. This will be useful for Android development too.&lt;/p&gt;

&lt;p&gt;It is to be noted that Spring has some integrations with the paid version of the IntelliJ IDEA IDE. As I am using the community edition, I will use the Spring CLI to setup the project. Furthermore, it simulates the scenario where you are a contractor and you have a one off project that requires Spring Boot. You might not like spending a few hundred dollars on a new IDE which you will have to spend time getting familiar with. IntelliJ IDEA Community Edition is great for writing code once you have the initial setup done.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; This post is much messier than I expected. I jumped ahead to build my photo blog. So much configuration and testing was involved in this side project. As such I do not think this post will make much sense for the general reader. If you happen to be trying something more than a hello world or step-by-step tutorial this might be of help.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.spring.io/spring-boot/docs/current/reference/html/cli-using-the-cli.html&#34;&gt;Spring Boot Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Pro-Spring-Boot-Felipe-Gutierrez/dp/1484214323/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1471961344&amp;amp;sr=1-1&#34;&gt;Pro Spring Boot by Felipe Gutierrez of PivotalLabs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;

&lt;p&gt;The assumption here is that you have sprint boot already installed to your commandline.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;spring init&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spring init --build=gradle --java-version=1.8 --dependencies=web,thymeleaf --package=codes.robin.spring --artifactId=codes.robin.spring --groupId=codes.robin.spring --packaging=war --name=spring-boot-web -x

spring init --build=gradle -d=jpa,h2 -g=codes.robin.spring -a=simple-jpa-app --package-name=code.robin.spring -name=simple-jpa-app --packaging=war

spring init --build=gradle -d=web,thymeleaf,data-jpa,data-rest -g=codes.robin.spring -a=spring-boot-journal --package-name=codes.robin.spring -name=spring-boot-journal -x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-x&lt;/code&gt; extracts the project into your current directory if location is not specified.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.spring.io/spring-boot/docs/current/reference/html/cli-using-the-cli.html&#34;&gt;Spring Boot CLI Docs&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;running-configurations&#34;&gt;Running &amp;amp; Configurations&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;gradle build

gradle bootRun
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try &lt;code&gt;localhost:8080&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;1 way to change port:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myapp/
    src/
    gradle/
    config/
        application.properties # add a line &amp;quot;server.port=8090&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/21083170/spring-boot-how-to-configure-port&#34;&gt;Stack link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can retrieve the values of the properties in the file by using the following annotation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Value(&amp;quot;${server.port}&amp;quot;)
private String port;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Spring also offers a way to configure separate profiles using application-{profile}.properties files. This is really useful if you have different environments. You really should have separate environments for dev and prod.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;application-dev.properties
    server.ip=localhost

application-prod.properties
    server.ip=http//cool-server.com

gradle bootRun -Dspring.profiles.active=dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;not-so-minimum-code&#34;&gt;(Not so) Minimum code&lt;/h2&gt;

&lt;h3 id=&#34;folder-structure&#34;&gt;Folder structure&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;src/
  domain # Models
  repository # Repository, JPA/Custom Queries
  web # Controllers
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;controller&#34;&gt;Controller&lt;/h3&gt;

&lt;p&gt;Using Spring &lt;code&gt;@Controller&lt;/code&gt; annotation.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@RestController&lt;/code&gt; could be used too. &lt;a href=&#34;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A convenience annotation that is itself annotated with @Controller and @ResponseBody.
Types that carry this annotation are treated as controllers where @RequestMapping methods assume @ResponseBody semantics by default. Additionally, if you want to set response codes. Just pass &lt;code&gt;HttpServletResponse response&lt;/code&gt; to the method like &lt;code&gt;someMethod(ttpServletResponse response)&lt;/code&gt; and set &lt;code&gt;response.setStatus(HttpServletResponse.SC_ACCEPTED);&lt;/code&gt;. &lt;a href=&#34;http://stackoverflow.com/questions/24292373/spring-boot-rest-controller-how-to-return-different-http-status-codes&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@ModelAttribute&lt;/code&gt; tells Spring to use its default web data binder to populate an instance of something with data from the HttpServletRequest. Choosing to pass this data back to the view is up to the programmer. When you have a method annotated with @ModelAttribute, it is being called every time code hits that servlet. When you have @ModelAttribute as one of the method&amp;rsquo;s parameters, we are talking about incoming Http form data-binding. &lt;a href=&#34;http://stackoverflow.com/questions/29370581/spring-mvc-please-explain-difference-between-requestparam-and-modelattribute&#34;&gt;link&lt;/a&gt; &lt;a href=&#34;http://stackoverflow.com/questions/29370581/spring-mvc-please-explain-difference-between-requestparam-and-modelattribute&#34;&gt;link&lt;/a&gt; &lt;a href=&#34;http://stackoverflow.com/questions/3423262/what-is-modelattribute-in-spring-mvc&#34;&gt;link&lt;/a&gt; &lt;a href=&#34;http://stackoverflow.com/questions/8688135/modelattribute-annotation-when-to-use-it/26916920#26916920&#34;&gt;very detailed link&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TODO: &lt;code&gt;ResponseEntity&amp;lt;?&amp;gt;&lt;/code&gt; vs &lt;code&gt;@ResponseBody&lt;/code&gt;. When to use?&lt;/li&gt;
&lt;li&gt;TODO: Pagination? Instead of loading all image posts at once, load them in stages.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@Controller&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #BB0066; font-weight: bold&#34;&gt;BasicController&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #888888&#34;&gt;//This is similar to @Inject (part of the JSR-330)&lt;/span&gt;
    &lt;span style=&#34;color: #888888&#34;&gt;//http://stackoverflow.com/questions/19414734/understanding-spring-autowired-usage&lt;/span&gt;
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@Autowired&lt;/span&gt;
    SomeRespository repo&lt;span style=&#34;color: #333333&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@ResponseBody&lt;/span&gt;
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(){&lt;/span&gt;
        &lt;span style=&#34;color: #888888&#34;&gt;//return NAME of html page (eg. index.html)&lt;/span&gt;
        &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;Greetings from spring boot!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;/someResource&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; method &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; RequestMethod&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;GET&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;someResource&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;HttpServletResponse response&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #888888&#34;&gt;//can change this to by default return a list?&lt;/span&gt;
        response&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;setStatus&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;HttpServletResponse&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;SC_OK&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;
            response&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;getWriter&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;write&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;Some useful message.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
            response&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;getWriter&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;flush&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;();&lt;/span&gt;
            response&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;getWriter&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;Exception ex&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;
            log&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;Argh, the AIs are rebelling! &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; ex&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;/upload&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; method &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; RequestMethod&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;POST&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@ResponseBody&lt;/span&gt;
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;public&lt;/span&gt; ResponseEntity&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; uploadFile&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;
            &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@RequestParam&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; MultipartFile file&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@RequestParam&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; required &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; String description&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;

        &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #888888&#34;&gt;// process multipart file&lt;/span&gt;
        &lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;
            System&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;getMessage&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;());&lt;/span&gt;
            &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;new&lt;/span&gt; ResponseEntity&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;HttpStatus&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;BAD_REQUEST&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;new&lt;/span&gt; ResponseEntity&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;HttpStatus&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;OK&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;/submitInfo&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; method &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; RequestMethod&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;POST&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@ResponseBody&lt;/span&gt;
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;someInfoFromAForm&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@ModelAttribute&lt;/span&gt; SomeObject someObject&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #888888&#34;&gt;//ModelAttribute is not actually required here&lt;/span&gt;

      &lt;span style=&#34;color: #888888&#34;&gt;//use getters&lt;/span&gt;

      &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; payload&lt;span style=&#34;color: #333333&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;References:
-&lt;a href=&#34;https://github.com/jdmr/fileUpload/blob/master/src/main/java/org/davidmendoza/fileUpload/web/ImageController.java&#34;&gt;davidmendoza&lt;/a&gt;
-&lt;a href=&#34;https://github.com/netgloo/spring-boot-samples/blob/master/spring-boot-file-upload-with-ajax/src/main/java/netgloo/controllers/MainController.java&#34;&gt;netgloo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;repository&#34;&gt;Repository&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #BB0066; font-weight: bold&#34;&gt;SomeRepository&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;extends&lt;/span&gt; JpaRepository&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;SomeObject&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; Long&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #888888&#34;&gt;//examples&lt;/span&gt;
repo&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;save&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;SomeObject&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
repo&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;findAll&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;();&lt;/span&gt;
repo&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;getOne&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; id&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Extended from:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #BB0066; font-weight: bold&#34;&gt;JpaRepository&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; ID &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;extends&lt;/span&gt; Serializable&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;extends&lt;/span&gt; PagingAndSortingRepository&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; ID&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;
    List&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;findAll&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;();&lt;/span&gt;
    List&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;findAll&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;Sort sort&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
    List&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;findAll&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;Iterable&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;ID&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; ids&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;S &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;extends&lt;/span&gt; T&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; List&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;S&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;save&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;Iterable&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;S&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; entities&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;flush&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;S &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;extends&lt;/span&gt; T&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; S &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;saveAndFlush&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;S entity&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;deleteInBatch&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;Iterable&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; entities&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;deleteAllInBatch&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;();&lt;/span&gt;
    T &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;getOne&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;ID id&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;domain&#34;&gt;Domain&lt;/h3&gt;

&lt;p&gt;Using JPA you need to have &lt;code&gt;@Entity&lt;/code&gt;.
&lt;code&gt;@Transient&lt;/code&gt; means it won&amp;rsquo;t be added to database. Some metadata.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Entity
public class SomeObject {

  @Id
  @GeneratedValue(strategy= GenerationType.AUTO)
  private Long id;

  private String description;
  private Date created;

  @Transient
  private SimpleDateFormat format = new SimpleDateFormat(&amp;quot;MM/dd/yyyy&amp;quot;);

  public SomeObject(String description, String date) throws ParseException{
      this.description = description;
      this.created = format.parse(date);
  }

  public SomeObject() {}

  //getters &amp;amp; setters

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;useful-things&#34;&gt;Useful things&lt;/h2&gt;

&lt;h3 id=&#34;curl-to-post-json&#34;&gt;cURL to post json&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;curl -X POST -d &#39;{&amp;quot;title&amp;quot;:&amp;quot;Test Spring Boot&amp;quot;,&amp;quot;created&amp;quot;:&amp;quot;06/18/2016&amp;quot;,&amp;quot;summary&amp;quot;:&amp;quot;Create Unit
Test for Spring Boot&amp;quot;}&#39; -H &amp;quot;Content-Type: application/json&amp;quot; http://localhost:8080/journal
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;testing&#34;&gt;Testing&lt;/h3&gt;

&lt;p&gt;If you do &lt;code&gt;gradle test&lt;/code&gt; it runs the tests and generates a html report in the &lt;code&gt;build/tests&lt;/code&gt; folder.
It would be nice to see the results immediately in terminal. &lt;a href=&#34;https://www.mkyong.com/gradle/gradle-display-test-results-in-console/&#34;&gt;link&lt;/a&gt;
Add the following to &lt;code&gt;build.gradle&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test {
    //we want display the following test events
    testLogging {
        events &amp;quot;PASSED&amp;quot;, &amp;quot;STARTED&amp;quot;, &amp;quot;FAILED&amp;quot;, &amp;quot;SKIPPED&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;accessing-h2-in-memory-test-database&#34;&gt;Accessing H2 In-Memory Test Database&lt;/h3&gt;

&lt;p&gt;Ensure &lt;code&gt;application.properties&lt;/code&gt; has:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spring.h2.console.enabled=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to &lt;code&gt;http://localhost:8080/h2-console/&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;By default it will have the org.h2.Driver driver class, which is the connection URL as
jdbc:h2:mem:testdb and the
username: sa
password: empty
to connect to the H2 engine.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;using-curl-to-upload-post-data-with-files&#34;&gt;Using cURL to upload post data with files&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/12667797/using-curl-to-upload-post-data-with-files&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;-F&lt;/code&gt; option:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-F/--form &amp;lt;name=content&amp;gt; Specify HTTP multipart POST data (H)`
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;curl \
  -F &amp;quot;userid=1&amp;quot; \
  -F &amp;quot;filecomment=This is an image file&amp;quot; \
  -F &amp;quot;image=@/home/user1/Desktop/test.jpg&amp;quot; \
  localhost/uploader.php
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;curl -i -X POST -H &amp;quot;Content-Type: multipart/form-data&amp;quot;
-F &amp;quot;data=@test.mp3&amp;quot; http://mysuperserver/media/1234/upload/

# when userid is cached as part of form
curl -i -X POST -H &amp;quot;Content-Type: multipart/form-data&amp;quot; -F &amp;quot;data=@test.mp3;userid=1234&amp;quot; http://localhost:8080/upload/

curl -i -X POST -H &amp;quot;Content-Type: multipart/form-data&amp;quot; -F file=@phoduckdp.jpg -F description=blah http://localhost:8080/upload/

curl -v -F description=value1 -F file=@phoduckdp.jpg http://localhost:8080/upload/

# GET verbose
curl -v http://localhost:8080/photos
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;curl-with-auth&#34;&gt;cURL with auth&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;curl -i localhost:8080/oauth/token -d &amp;quot;grant_type=password&amp;amp;scope=read&amp;amp;username=springb
oot&amp;amp;password=isawesome&amp;quot; -u acd167f6-04f8-4306-a118-03e2356f73aa:2dd4bec5-fe62-4568-94a1-
c31ac3c4eb4e

curl -i -H &amp;quot;Authorization: bearer f1d362f2-b167-41d9-a411-35f8ba7f0454&amp;quot; localhost:8080/api
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mysql&#34;&gt;MySQL&lt;/h3&gt;

&lt;p&gt;Assuming you have it installed on OSX.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew info mysql

To have launchd start mysql now and restart at login:
  brew services start mysql
Or, if you don&#39;t want/need a background service you can just run:
  mysql.server start

To stop
  mysql.server stop
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;getting-properties-config&#34;&gt;Getting properties/config&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;@Value(&amp;quot;${file.upload.directory}&amp;quot;)
private String fileUploadDirectory;

//OR

String directory = env.getProperty(&amp;quot;file.upload.directory&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;optional-url-path&#34;&gt;Optional URL path&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/4904092/with-spring-3-0-can-i-make-an-optional-path-variable&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;livereload-setup&#34;&gt;LiveReload setup&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; In the end I just included the &lt;code&gt;devtools&lt;/code&gt; dependency and used the &lt;code&gt;make&lt;/code&gt; command in the IDE before refreshing in the browser. Static files are still updated. However, when it comes to javascript I prefer having a setup that enables me to see the changes immediately (actually livereloading) so I think developing the UI &amp;amp; frontend in a separate project would be better.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/continuous-auto-restart-with-spring-boot-devtools&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add to build.gradle;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;configurations {
    dev
}

# under dependencies
dev(&amp;quot;org.springframework.boot:spring-boot-devtools&amp;quot;)


# hmm
bootRun {
    // Use Spring Boot DevTool only when we run Gradle bootRun task
    classpath = sourceSets.main.runtimeClasspath + configurations.dev
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;h2-database-config&#34;&gt;H2 Database config&lt;/h3&gt;

&lt;p&gt;If nothing is specified in &lt;code&gt;application.properties&lt;/code&gt;, h2 uses in mem.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spring.datasource.url = jdbc:h2:mem:testdb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A persistent db can be useful for testing. This setting doesn&amp;rsquo;t work nicely with &lt;code&gt;gradle build --continuous&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spring.datasource.url=jdbc:h2:~/test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.jpa.hibernate.ddl-auto=update
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sample-application-properties&#34;&gt;Sample &lt;code&gt;application.properties&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;file.upload.directory=/home/someuser/tomcat-data-directory

spring.h2.console.enabled=true

#JPA-Hibernate
spring.jpa.show-sql = true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

spring.datasource.url=jdbc:h2:/home/someuser/tomcat-data-directory/testdb;DB_CLOSE_ON_EXIT=FALSE

#Spring DataSource SQL
#spring.datasource.url = jdbc:mysql://localhost:3306/cooldatabase
#spring.datasource.username = root
#spring.datasource.password =

spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cpp Basics 1</title>
      <link>https://robin-lee.github.io/blog/2016/08/cpp-basics-1/</link>
      <pubDate>Fri, 19 Aug 2016 15:33:28 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2016/08/cpp-basics-1/</guid>
      <description>

&lt;p&gt;Algorithms and data structures are a central part of software development. I thought it would be reinforce the knowledge I have in this area.
Competitions in this domain seem to favor cpp and knowing a variant of c better will certainly help when doing &lt;em&gt;hardware programming&lt;/em&gt;. Hence, we eplore the
basics of cpp before we move on to data structures and then algorithms.&lt;/p&gt;

&lt;p&gt;A series in cpp begins. Naturally, it involves more than just language.&lt;/p&gt;

&lt;p&gt;Reference: Accelerated C++
Note: This post is written largely in the context of using OSX (my laptop).&lt;/p&gt;

&lt;h2 id=&#34;a-program&#34;&gt;A program&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #557799&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #888888&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #557799&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #557799&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #888888&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #557799&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;main&lt;/span&gt;() {
    {
        &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #333333&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;Hot chocolate is nice.&amp;quot;&lt;/span&gt;;
        std&lt;span style=&#34;color: #333333&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #333333&#34;&gt;::&lt;/span&gt;endl;
    }
    {
        &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #333333&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;COOP iced tea is nice!&amp;quot;&lt;/span&gt;;
        std&lt;span style=&#34;color: #333333&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #333333&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A basic program might look like something above. &lt;code&gt;#include&lt;/code&gt; libraries and send something to the output.&lt;/p&gt;

&lt;p&gt;Things to note here would be:
- &lt;code&gt;std&lt;/code&gt; namespace is used explicitly.
- The first &lt;code&gt;::&lt;/code&gt; used may be called the scope operator.
- &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and its partner &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; are &lt;em&gt;redirection&lt;/em&gt; operators.
- &lt;code&gt;{ }&lt;/code&gt; brackets create scopes. You may consider them as &lt;em&gt;units&lt;/em&gt;. The program runs here because there 2 units and they only access the variables within them.
- &lt;code&gt;return 0&lt;/code&gt;: 0 return value implies the program executed fine. Any other non-zero return value means an &lt;strong&gt;&lt;em&gt;implementation&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;defined failure&lt;/strong&gt;..&lt;/p&gt;

&lt;h2 id=&#34;makefile&#34;&gt;Makefile&lt;/h2&gt;

&lt;p&gt;To run a program coded in cpp, you need to first compile the cpp code and then execute the resulting executable file.
It can get quite repetive. To make things simpler it useful to have a script to automate the &lt;em&gt;build&lt;/em&gt; process. Creating a Makefile for the &lt;code&gt;make&lt;/code&gt; tool is one
way you can achieve such automation. Some call it a &lt;a href=&#34;https://www.cs.umd.edu/class/fall2002/cmsc214/Tutorial/makefile.html&#34;&gt;Macro&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;:&lt;/span&gt; compile
        ./play

&lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;compile&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;:&lt;/span&gt;
        g++ play.cpp -o play
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By default the tool &lt;code&gt;make&lt;/code&gt; process the first target. By convention, the first target is called &lt;code&gt;all&lt;/code&gt; (we are not following that here to be clear on how make works).
The questions that arise now are: What is the format of a make file? What is target?&lt;/p&gt;

&lt;p&gt;A makefile has a format like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;:&lt;/span&gt; dependencies
&lt;span style=&#34;color: #FF0000; background-color: #FFAAAA&#34;&gt;[tab&lt;/span&gt; &lt;span style=&#34;color: #FF0000; background-color: #FFAAAA&#34;&gt;character]&lt;/span&gt; &lt;span style=&#34;color: #FF0000; background-color: #FFAAAA&#34;&gt;system&lt;/span&gt; &lt;span style=&#34;color: #FF0000; background-color: #FFAAAA&#34;&gt;command&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Another way you can specify the default target is &lt;a href=&#34;http://stackoverflow.com/a/30176470&#34;&gt;link&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #996633&#34;&gt;.DEFAULT_GOAL&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; mytarget
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For a newer make &amp;gt; 3.80:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;.PHONY&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;:&lt;/span&gt; default
&lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;:&lt;/span&gt; mytarget ;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;gcc-vs-g&#34;&gt;gcc vs g++&lt;/h2&gt;

&lt;p&gt;You could just do &lt;code&gt;make&lt;/code&gt; in the same directory as your cpp code. An output file will be created which you can execute like &lt;code&gt;./the_output_file.out&lt;/code&gt;.
What I &lt;strong&gt;&lt;em&gt;think&lt;/em&gt;&lt;/strong&gt; happens is that &lt;code&gt;make&lt;/code&gt; gets the default compiler for the cpp code. For OSX, in my case, it &lt;em&gt;should&lt;/em&gt; be gcc.&lt;/p&gt;

&lt;p&gt;Anyway, whats important to know here is the difference between g++ and gcc as above we specified g++.&lt;/p&gt;

&lt;p&gt;Quoting a stackoverflow &lt;a href=&#34;http://stackoverflow.com/a/173007&#34;&gt;post&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The main differences:

1. gcc will compile: *.c/*.cpp files as C and C++ respectively.
2. g++ will compile: *.c/*.cpp files but they will all be treated as C++ files.
3. Also if you use g++ to link the object files it automatically links in the std C++ libraries (gcc does not do this).
4. gcc compiling C files has less predefined macros.
5. gcc compiling *.cpp and g++ compiling *.c/*.cpp files has a few extra macros.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Knowing the difference might just help you when you have one of those projects involving sensors or microcontrollers!&lt;/p&gt;

&lt;h2 id=&#34;c-strings&#34;&gt;C++ Strings&lt;/h2&gt;

&lt;p&gt;Frankly, at the moment I still do not understand enough about between strings and string literals. Being pragmatic,
I will look at some practical use cases.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #557799&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #888888&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #557799&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;using&lt;/span&gt; std&lt;span style=&#34;color: #333333&#34;&gt;::&lt;/span&gt;string;

string stringLiteral &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;characters enclose in double quotes and cannot span lines&amp;quot;&lt;/span&gt;;

&lt;span style=&#34;color: #888888&#34;&gt;//overloaded constructor to create a string with n of character.&lt;/span&gt;
string repeatCharacter &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;z&lt;/span&gt;(&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color: #0044DD&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color: #888888&#34;&gt;//a string&lt;/span&gt;
string someString &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; string(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;i am a string&amp;quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A &lt;strong&gt;string literal&lt;/strong&gt; is a bunch of characters in doubles and they cannot span lines. Having some prior knowledge in C and C++, I would say that a string literal is &lt;em&gt;a series of characters in memory terminated by a null character &lt;code&gt;\0&lt;/code&gt;&lt;/em&gt;. Maybe it would be better to call them character literal arrays.&lt;/p&gt;

&lt;p&gt;As for a &lt;strong&gt;string&lt;/strong&gt;, you use a contructor &lt;code&gt;string(&amp;quot;some text&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A common use case with strings is to join them just like creating a sentence where you want to join words or phrases together.
This is where you can see a difference (&lt;a href=&#34;http://stackoverflow.com/questions/662918/how-do-i-concatenate-multiple-c-strings-on-one-line&#34;&gt;refence link&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;string stringLiteral1 &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;
string stringLiteral2 &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot; world&amp;quot;&lt;/span&gt;;

&lt;span style=&#34;color: #888888&#34;&gt;//you cannot do because they are both string literals.&lt;/span&gt;
string s &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; stringLiteral1 &lt;span style=&#34;color: #333333&#34;&gt;+&lt;/span&gt; stringLiteral2;

&lt;span style=&#34;color: #888888&#34;&gt;//(A)convert them to strings&lt;/span&gt;
string newstring &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; string(stringLiteral1) &lt;span style=&#34;color: #333333&#34;&gt;+&lt;/span&gt; string(stringLiteral2);

&lt;span style=&#34;color: #888888&#34;&gt;//(B)or perhaps&lt;/span&gt;
std&lt;span style=&#34;color: #333333&#34;&gt;::&lt;/span&gt;stringstream ss;
ss &lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;Hello, world, &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; myInt &lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; niceToSeeYouString;
std&lt;span style=&#34;color: #333333&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; ss.str();

&lt;span style=&#34;color: #888888&#34;&gt;//(C)or using append; a little verbose?.&lt;/span&gt;
std&lt;span style=&#34;color: #333333&#34;&gt;::&lt;/span&gt;string s;
s.append(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;Hello world, &amp;quot;&lt;/span&gt;);
s.append(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;nice to see you, &amp;quot;&lt;/span&gt;);
s.append(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;or not.&amp;quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At a glance, I think I would prefer using method (A) or (B) to create dynamic strings. In a game prototype, NPCs could
have a lengthly paragraph text to say depending on a player&amp;rsquo;s actions. What if there really was a lot to output because the NPC
is such a great storyteller?&lt;/p&gt;

&lt;p&gt;string::size_type could be useful if you have &amp;gt; 32767 characters. The book says that it is good practice to use size_type for the
size of strings since it was created for the purpose of &lt;em&gt;sizing&lt;/em&gt; strings.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// size_type used intead of int
const std::string::size_type cols = greeting.size() + pad * 2 + 2;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last point for this post is off-topic from strings but it is relevant to cpp&amp;hellip;
Quoting the book:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;One reason to count from 0 is that doing so encourages us to use asymmetric ranges to express intervals. For example, it is natural to use the range [0, rows) to describe the first for statement, as it is to use the range [1, rows] to describe the second one.
Asymmetric ranges are usually easier to use than symmetric ones because of an important property: A range of the form [m, n) has n - m elements, and a range of the form [m, n] has n - m + 1 elements. So, for example, the number of elements in [0, rows) is obvious (i.e., rows - 0, or rows) but the number in [1, rows] is less so.
This behavioral difference between asymmetric and symmetric ranges is particularly evident in the case of empty ranges: If we use asymmetric ranges, we can express an empty range as [n, n), in contrast to [n, n-1] for symmetric ranges. The possibility that the end of a range could ever be less than the beginning can cause no end of trouble in designing programs.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Developing and Deploying Java Servlet Webapp</title>
      <link>https://robin-lee.github.io/blog/2016/08/developing-and-deploying-java-servlet-webapp/</link>
      <pubDate>Fri, 12 Aug 2016 16:23:07 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2016/08/developing-and-deploying-java-servlet-webapp/</guid>
      <description>

&lt;h2 id=&#34;developing&#34;&gt;Developing&lt;/h2&gt;

&lt;p&gt;You can find a few tutorials on how to create a basic (hello world) webapp with java servlets in eclipse so it will not be included here.
As always my experience differs from such tutorials. It is never smooth sailing. You always have to configure or troubleshoot something even if your setup is &lt;em&gt;exactly&lt;/em&gt; the same. The last time I did something with Servlets or JSP was in 2013 or 2014. I don&amp;rsquo;t think I have my notes from then.&lt;/p&gt;

&lt;p&gt;This time round I had to do some tweaking to get Eclipse to recognise the tomcat server installed on OSX (not the VM, thats working well). For some reason it didn&amp;rsquo;t recognize tomcat 8.5.*.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;You have to patch catalina.jar, as this is version number the WTP adapter looks at. It&#39;s a quite useless check, and the adapter should allow you to start the server anyway, but nobody has though of that yet.

For years and with every version of Tomcat this is always a problem.

To patch you can do the following:

cd [tomcat or tomee home]/lib
mkdir catalina
cd catalina/
unzip ../catalina.jar
vim org/apache/catalina/util/ServerInfo.properties
Make sure it looks like the following (the version numbers all need to start with 8.0):

server.info=Apache Tomcat/8.0.0
server.number=8.0.0
server.built=May 11 2016 21:49:07 UTC
Then:

jar uf ../catalina.jar org/apache/catalina/util/ServerInfo.properties
cd ..
rm -rf catalina
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/37024876/how-to-use-tomcat-8-5-x-and-tomee-7-x-with-eclipse&#34;&gt;stack link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once this was done, I could develop and test my webapp in Eclipse.&lt;/p&gt;

&lt;h2 id=&#34;deploying&#34;&gt;Deploying&lt;/h2&gt;

&lt;p&gt;To me, running the webapp in the IDE is not deploying. There were a few tutorials with misleading titles.&lt;/p&gt;

&lt;p&gt;I was told that to deploy an webapp is bascially copying a war archive into a directory for tomcat. To have a 2nd opinion, I found this &lt;a href=&#34;http://www.vogella.com/tutorials/EclipseWTP/article.html&#34;&gt;vogella tutorial&lt;/a&gt;. Vogella has been consistent in providing great tutorials to help you get started.&lt;/p&gt;

&lt;p&gt;In Eclipse, you just right click on the root package for your webapp and export as a &lt;code&gt;war archive&lt;/code&gt; and save it somewhere.&lt;/p&gt;

&lt;p&gt;To transfer the file to the VM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scp &amp;lt;filename&amp;gt;.war tomcatuser@192.168.56.101:/home/&amp;lt;vm user&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And via ssh in &lt;code&gt;/opt/tomcat&lt;/code&gt; (assuming you set up tomcat here and service is called tomcat8):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp ~/&amp;lt;filename&amp;gt;.war webapps/
sudo service tomcat8 restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now going to &lt;code&gt;&amp;lt;url&amp;gt;:8080/&amp;lt;filename&amp;gt;/&amp;lt;classname&amp;gt;&lt;/code&gt; should load your webpage or whatever response you made.
You could change the URL by specifying configurations in a &lt;code&gt;web.xml&lt;/code&gt; but that will not be covered here&amp;hellip; for now?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tomcat Development Server</title>
      <link>https://robin-lee.github.io/blog/2016/08/tomcat-development-server/</link>
      <pubDate>Thu, 11 Aug 2016 23:13:48 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2016/08/tomcat-development-server/</guid>
      <description>

&lt;p&gt;I always wanted to learn some backend development seriously and finally I have the opportunity to do so. I have played around with server setup in the past but most of the information has been forgotten.&lt;/p&gt;

&lt;p&gt;This time round a development server will be setup in virtualbox using ubuntu server 14.04 LTS (support expires 2019). For 16.04 LTS, I think the &lt;code&gt;apt-get&lt;/code&gt; command is replace with &lt;code&gt;apt&lt;/code&gt; and there are many new changes&amp;hellip; To save some time and focus on learning backend development sticking with 14.04 LTS is the better choice.&lt;/p&gt;

&lt;p&gt;Technologies used are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apache2: Web layer, sits infront of tomcat&lt;/li&gt;
&lt;li&gt;MySQL: Relational database&lt;/li&gt;
&lt;li&gt;Tomcat: Java app server&lt;/li&gt;
&lt;li&gt;Adminer: Web tool to manage MySQL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VirtualBox&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;virtualbox&#34;&gt;VirtualBox&lt;/h2&gt;

&lt;p&gt;I installed an image of ubuntu server 14.04 LTS.
Then I had to configure the network setting so that I would be able to access the web server hosted on the VM.&lt;/p&gt;

&lt;p&gt;The steps were:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to preferences for VirtualBox.&lt;/li&gt;
&lt;li&gt;Networks &amp;gt; Host-only networks.&lt;/li&gt;
&lt;li&gt;Ensure there is an entry vboxnet0 (with whatever ip range you want).&lt;/li&gt;
&lt;li&gt;Add a new adapter under network settings &lt;strong&gt;for VM&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Set it to host-only.&lt;/li&gt;
&lt;li&gt;Start up VM and configure &lt;code&gt;/etc/network/interfaces&lt;/code&gt;. (VM and Vbox settings have no relation hence you have to configure the new adapter here too)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;How to configure &lt;code&gt;/etc/network/interfaces&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet dhcp

auto eth1
iface eth1 inet dhcp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Originally, there was only eth0. You have to add eth1 too. (Special thanks: Vitor)&lt;/p&gt;

&lt;p&gt;After changing the settings, you can reboot the system. Although&amp;hellip; It might be possible to do &lt;code&gt;sudo ifdown eth1&lt;/code&gt; and &lt;code&gt;sudo ifup eth1&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;apache2&#34;&gt;Apache2&lt;/h2&gt;

&lt;p&gt;This was easy to setup. It gets complicated if you  want to configure it for a production environment though. (Further reading to be done)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql&#34;&gt;MySQL&lt;/h2&gt;

&lt;p&gt;You could do &lt;code&gt;sudo apt-get install mysql-server&lt;/code&gt; and it will work fine. However, I wanted a newer version mysql 5.7 so I had to download a newer APT package from the MySQL APT repository and then run the commands below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo dpkg -i &amp;lt;mysql-apt-file&amp;gt;.deb
sudo apt-get update
sudo apt-get install mysql-server
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://serverfault.com/questions/752063/how-can-i-install-mysql-5-7-9-to-ubuntu-14-04&#34;&gt;Serverfault mysql reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-14-04&#34;&gt;Digital ocean mysql reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;adminer&#34;&gt;Adminer&lt;/h2&gt;

&lt;p&gt;phpMyAdmin is a popular tool people use to view MySQL database instances and it is known to have many security flaws. Adminer is an alternative. I had to try a few times to set this up. For some reason I kept getting 404 errors. Eventually, it worked after I tried retarting from a clean slate 2-3 times. There might have been some miscofigured files lying around (not clean slate). Unfortunately, apt-get doesn&amp;rsquo;t give you the latest version.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install adminer
sudo ln -s /etc/adminer/apache.conf /etc/apache2/conf-available/adminer.conf
sudo a2enconf adminer.conf
sudo service apache2 reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://www.leaseweb.com/labs/2014/06/install-adminer-manually-ubuntu-14-04/&#34;&gt;Link for manual installation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;tomcat&#34;&gt;Tomcat&lt;/h2&gt;

&lt;p&gt;Tomcat requires java. Hence, install java before installing tomcat. Next, it is good practice to run the server as another user (security) but this can be annoying to get right. If you are not too familiar with the linux system and do not have a large repertoire of commandline commands as well as not a deep/intermediate understanding of the commands it will be a challenge.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install default-jdk

sudo groupadd tomcat
sudo useradd -s /bin/false -g tomcat -d /opt/tomcat tomcat

wget &amp;lt;link to tomcat binary&amp;gt;
sudo mkdir /opt/tomcat
sudo tar xvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1
cd /opt/tomcat

# We put the tomcat user as the owner of the folder of tomcat:
sudo chown -R tomcat:tomcat /opt/tomcat
# Users can not modify the configuration of tomcat:
sudo chmod -R g+r /opt/tomcat/conf
# Users can modify the other folders:
sudo chmod -R g+w /opt/tomcat/conf
sudo chmod -R g+w /opt/tomcat/logs
sudo chmod -R g+w /opt/tomcat/temp
sudo chmod -R g+w /opt/tomcat/webapps
sudo chmod -R g+w /opt/tomcat/work
# Activate the sticky-bit for new files keep permissions defined:
sudo chmod -R g+s /opt/tomcat/conf
sudo chmod -R g+s /opt/tomcat/logs
sudo chmod -R g+s /opt/tomcat/temp
sudo chmod -R g+s /opt/tomcat/webapps
sudo chmod -R g+s /opt/tomcat/work
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might get a permission denied message when trying to &lt;code&gt;cd&lt;/code&gt; into logs or one of the folders&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo usermod -a -G tomcat &amp;lt;your username&amp;gt;
exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;exit&lt;/code&gt; till you are logged out then relog for permission changes to take place. You need to be in the tomcat group to have access.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://superuser.com/questions/632618/best-practice-for-access-permission-to-users-for-apache-tomcat&#34;&gt;More on permissions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/opt&lt;/code&gt; is for third-party applications that don&amp;rsquo;t rely on any dependencies outside the scope of said package. &lt;code&gt;/usr/local&lt;/code&gt; is for packages installed on this machine outside the scope of the distribution package manager. &lt;a href=&#34;http://askubuntu.com/questions/34880/use-of-opt-and-usr-local-directories-in-the-context-of-a-pc&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After all that you need to make a script that will run on startup.
The script will be placed in &lt;code&gt;/etc/init.d/&amp;lt;name&amp;gt;&lt;/code&gt;. &lt;code&gt;update-rc.d&lt;/code&gt; will be of help.
(So may commands to know)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tomcat8&lt;/code&gt; script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

### References:
### http://askubuntu.com/questions/223944/how-to-automatically-restart-tomcat7-on-system-reboots/224402
### http://superuser.com/questions/632618/best-practice-for-access-permission-to-users-for-apache-tomcat
###

### BEGIN INIT INFO
# Provides:        tomcat8
# Required-Start:  $network
# Required-Stop:   $network
# Default-Start:   2 3 4 5
# Default-Stop:    0 1 6
# Short-Description: Start/Stop Tomcat server
### END INIT INFO

JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
PATH=/sbin:/bin:/usr/sbin:/usr/bin

start() {
 sh /opt/tomcat/bin/startup.sh
}

stop() {
 sh /opt/tomcat/bin/shutdown.sh
}

case $1 in
  start|stop) $1;;
  restart) stop; start;;
  *) echo &amp;quot;Run as $0 &amp;lt;start|stop|restart&amp;gt;&amp;quot;; exit 1;;
esac
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Give the script permissions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chmod 755 /etc/init.d/tomcat8
sudo upate-rc.d tomcat8 defaults
sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use like &lt;code&gt;service tomcat8 &amp;lt;stop|start|restart&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you wish may use a fancier &lt;a href=&#34;https://gist.github.com/miglen/5590986&#34;&gt;script&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;testing-setup&#34;&gt;Testing setup&lt;/h2&gt;

&lt;p&gt;Default port for tomcat is 8080. Test &lt;code&gt;curl 127.0.0.1:8080&lt;/code&gt;. You should see the default tomcat webpage.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ipconfig | grep addr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now get the ip for you virtual machine and see if you can access apache, adminer and tomcat from your host machine&amp;rsquo;s web browser.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ip address&amp;gt;
&amp;lt;ip address&amp;gt;/adminer
&amp;lt;ip address&amp;gt;:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Phew, that is done.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fundamentals: Sockets</title>
      <link>https://robin-lee.github.io/blog/2016/08/fundamentals-sockets/</link>
      <pubDate>Mon, 01 Aug 2016 11:59:12 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2016/08/fundamentals-sockets/</guid>
      <description>

&lt;h1 id=&#34;what-is-a-socket&#34;&gt;What is a socket?&lt;/h1&gt;

&lt;p&gt;A socket is a &lt;em&gt;tool&lt;/em&gt; that allows communication between two different processes on the same or different machines. To be more precise, it&amp;rsquo;s a way to talk to other computers using standard Unix file descriptors. In Unix, every I/O action is done by writing or reading a file descriptor. A file descriptor is just an integer associated with an open file and it can be a network connection, a text file, a terminal, or something else.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.tutorialspoint.com/unix_sockets/what_is_socket.htm&#34;&gt;TutorialPoint&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;You hear talk of &amp;quot;sockets&amp;quot; all the time, and perhaps you are wondering just what they are exactly. Well, they&#39;re this: a way to speak to other programs using standard Unix file descriptors.

What?

Ok—you may have heard some Unix hacker state, &amp;quot;Jeez, everything in Unix is a file!&amp;quot; What that person may have been talking about is the fact that when Unix programs do any sort of I/O, they do it by reading or writing to a file descriptor. A file descriptor is simply an integer associated with an open file. But (and here&#39;s the catch), that file can be a network connection, a FIFO, a pipe, a terminal, a real on-the-disk file, or just about anything else. Everything in Unix is a file! So when you want to communicate with another program over the Internet you&#39;re gonna do it through a file descriptor, you&#39;d better believe it.

&amp;quot;Where do I get this file descriptor for network communication, Mr. Smarty-Pants?&amp;quot; is probably the last question on your mind right now, but I&#39;m going to answer it anyway: You make a call to the socket() system routine. It returns the socket descriptor, and you communicate through it using the specialized send() and recv() (man send, man recv) socket calls.

&amp;quot;But, hey!&amp;quot; you might be exclaiming right about now. &amp;quot;If it&#39;s a file descriptor, why in the name of Neptune can&#39;t I just use the normal read() and write() calls to communicate through the socket?&amp;quot; The short answer is, &amp;quot;You can!&amp;quot; The longer answer is, &amp;quot;You can, but send() and recv() offer much greater control over your data transmission.&amp;quot;

What next? How about this: there are all kinds of sockets. There are DARPA Internet addresses (Internet Sockets), path names on a local node (Unix Sockets), CCITT X.25 addresses (X.25 Sockets that you can safely ignore), and probably many others depending on which Unix flavor you run. This document deals only with the first: Internet Sockets.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I really like Beej&amp;rsquo;s writing style.&lt;/p&gt;

&lt;p&gt;Reference:
&lt;a href=&#34;http://beej.us/guide/bgnet/output/html/multipage/theory.html&#34;&gt;Beej&amp;rsquo;s Guide to Network Programming&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, it can be seen that when talking about sockets it is important to be clear on the context. What kind of socket are we talking about?
For this post, we will continue with Intenet Sockets. I was in the midst of messing with NodeJS when I just had to get sockets &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&#34;internet-sockets&#34;&gt;Internet sockets&lt;/h1&gt;

&lt;p&gt;Programmatically, it can be said that an internet socket consists of 5 things (see tuple):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{protocol, local address, local port, remote address, remote port}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/a/11782471&#34;&gt;comment by EJP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are 2 types:
- Stream sockets (SOCK_STREAM): reliable two-way connected communication streams
- Datagram sockets (SOCK_DGRAM): connectionless and data may or may not arrive&lt;/p&gt;

&lt;p&gt;Stream sockets achieve this reliability by using a protocol: Transmission Control Protocol (TCP; RFC 793). Usually you hear of TCP/IP. IP is Internet Protocol (RFC 791) which is responsible for routing not data integrity.&lt;/p&gt;

&lt;p&gt;Datagram sockets use a protocol called User Datagram Protocol (UDP; RFC 768). For Datagram sockets you don&amp;rsquo;t have to maintain an open connection. Stream sockets you do.&lt;/p&gt;

&lt;h1 id=&#34;socket-programming&#34;&gt;Socket Programming&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cs.dartmouth.edu/~campbell/cs50/socketprogramming.html&#34;&gt;dartmouth cs50&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Growing Object Oriented Software, Guided by Tests Part 1</title>
      <link>https://robin-lee.github.io/blog/2016/07/growing-object-oriented-software-guided-by-tests-part-1/</link>
      <pubDate>Wed, 27 Jul 2016 14:31:03 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2016/07/growing-object-oriented-software-guided-by-tests-part-1/</guid>
      <description>

&lt;p&gt;In this series, I consolidate points from the GOOSGBT book and may comment on some of them.
The post may not be coherent as I am extracting fragments I consider useful or enlightening.&lt;/p&gt;

&lt;p&gt;Stackoverflow post to read: &lt;a href=&#34;http://stackoverflow.com/questions/920992/unit-test-adoption/924639#924639&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;levels-of-testing&#34;&gt;Levels of testing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Acceptance: Does the whole system work?&lt;/li&gt;
&lt;li&gt;Integration: Does our code work against code we can&amp;rsquo;t change?&lt;/li&gt;
&lt;li&gt;Unit: Do our objects do the right thing, are they convenient to work with?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;support-for-tdd-with-mock-objects&#34;&gt;Support for TDD with mock objects&lt;/h2&gt;

&lt;p&gt;The essential steps for creating a test:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create any required mock objects.&lt;/li&gt;
&lt;li&gt;Create any real objects, including the target object.&lt;/li&gt;
&lt;li&gt;Specify how you expect the mock objects to be called by the target object.&lt;/li&gt;
&lt;li&gt;Call the triggering method(s) on the target object.&lt;/li&gt;
&lt;li&gt;Assert that any resulting values are valid and that all the expected calls have been made.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The important point, as we stress repeatedly throughout this book, is to make clear the intention of every test, distinguishing between the tested functionality, the supporting infrastructure, and the object structure.&lt;/p&gt;

&lt;h2 id=&#34;test-fixture&#34;&gt;Test Fixture&lt;/h2&gt;

&lt;p&gt;A test fixture is the fixed state that exists at the start of a test. A test fixture ensures that a test is repeatable—every time a test is run it starts in the same state so it should produce the same results. A fixture may be set up before the test runs and torn down after it has finished. Think of &lt;code&gt;@Before&lt;/code&gt; and &lt;code&gt;@After&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;mocking&#34;&gt;Mocking&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Notes here are for jMock2. In the neigbourhood of page 26.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A mockery represents the context of the object under test, its neighboring objects; mock objects stand in for the real neighbors of the object under test while the test runs; and expectations describe how the object under test should invoke its neighbors during the test.&lt;/p&gt;

&lt;p&gt;Note that the test does not require any assertions. This is quite common in mock object tests.&lt;/p&gt;

&lt;h2 id=&#34;walking-skeleton&#34;&gt;Walking Skeleton&lt;/h2&gt;

&lt;p&gt;We can’t automate the build, deploy, and test cycle without some idea of the overall structure. We don’t need much detail yet, just a broad-brush picture of what major system components will be needed to support the first planned release and how they will communicate.&lt;/p&gt;

&lt;p&gt;We need a high-level view of the client’s requirements, both functional and non- functional, to guide our choices.&lt;/p&gt;

&lt;h2 id=&#34;unit-test-behaviour-not-methods&#34;&gt;Unit-Test Behaviour Not Methods&lt;/h2&gt;

&lt;p&gt;Many developers who adopt TDD find their early tests hard to understand when they revisit them later, and one common mistake is thinking about testing methods. A test called testBidAccepted() tells us what it does, but not what it’s for.&lt;/p&gt;

&lt;p&gt;We do better when we focus on the &lt;strong&gt;features that the object under test should provide&lt;/strong&gt;, each of which may require collaboration with its neighbors and calling more than one of its methods. We need to know how to use the class to achieve a goal, *&lt;strong&gt;not&lt;/strong&gt; how to exercise all the paths through its code*.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sniperJoinsAuctionUntilAuctionCloses()&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;object-oriented-style&#34;&gt;Object - Oriented Style&lt;/h1&gt;

&lt;p&gt;We value code that is easy to maintain over code that is easy to write.1 Imple- menting a feature in the most direct way can damage the maintainability of the system, for example by making the code difficult to understand or by introducing hidden dependencies between components. Balancing immediate and longer-term concerns is often tricky, but we’ve seen too many teams that can no longer deliver because their system is too brittle.&lt;/p&gt;

&lt;p&gt;We don’t want technical concepts to leak into the application model, so we write interfaces to describe its relationships with the outside world in its terminology (Cockburn’s ports). Then we write bridges between the application core and each technical domain (Cockburn’s adapters). This is related to what Eric Evans calls an “anticorruption layer” [Evans03].&lt;/p&gt;

&lt;h2 id=&#34;achieving-object-oriented-design&#34;&gt;Achieving Object Oriented Design&lt;/h2&gt;

&lt;p&gt;Breaking off, Budding out, Bundling up&lt;/p&gt;

&lt;p&gt;Budding Out.&lt;/p&gt;

&lt;p&gt;We think of this as “on-demand” design: we “pull” interfaces and their imple- mentations into existence from the needs of the client, rather than “pushing” out the features that we think a class should provide.&lt;/p&gt;

&lt;h2 id=&#34;building-up-to-higher-level-programming&#34;&gt;Building up to higher level programming&lt;/h2&gt;

&lt;p&gt;The declarative layer describes what the code will do, while the implementation layer describes how the code does it. The declarative layer is, in effect, a small domain-specific language embedded (in this case) in Java.&lt;/p&gt;

&lt;h2 id=&#34;building-on-third-party-code&#34;&gt;Building on Third Party Code&lt;/h2&gt;

&lt;h3 id=&#34;only-mock-objects-you-own&#34;&gt;Only mock objects you own&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;When we use third-party code we often do not have a deep understanding of how it works. Even if we have the source available, we rarely have time to read it thoroughly enough to explore all its quirks. We can read its documentation, which is often incomplete or incorrect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah tell me about it.&lt;/p&gt;

&lt;p&gt;Part 2 will be on the worked example.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gradle and gradle init</title>
      <link>https://robin-lee.github.io/blog/2016/07/gradle-and-gradle-init/</link>
      <pubDate>Wed, 27 Jul 2016 10:56:29 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2016/07/gradle-and-gradle-init/</guid>
      <description>

&lt;h1 id=&#34;what-is-gradle&#34;&gt;What is gradle?&lt;/h1&gt;

&lt;p&gt;Gradle is an open source &lt;strong&gt;build automation system&lt;/strong&gt; that builds upon the concepts of Apache Ant and Apache Maven and introduces a Groovy-based domain-specific language (DSL) instead of the XML form used by Apache Maven of declaring the project configuration.
(&lt;a href=&#34;https://en.wikipedia.org/wiki/Gradle&#34;&gt;wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Here are more build tools from a stackoverflow post linked later:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apache Ant &amp;amp; Apache Maven - Java&lt;/li&gt;
&lt;li&gt;sbt (Simple Build Tool) - for Scala&lt;/li&gt;
&lt;li&gt;A-A-P - Python based build tool&lt;/li&gt;
&lt;li&gt;Rake (Apache Builder) - Ruby&lt;/li&gt;
&lt;li&gt;Leiningen for Clojure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is gulpjs and gruntjs for Javascript too.&lt;/p&gt;

&lt;h1 id=&#34;gradle-and-android-studio&#34;&gt;Gradle and Android Studio&lt;/h1&gt;

&lt;p&gt;You used to use Eclipse to develop for Android. Later, the main IDE changed to Android Studio and together with it came gradle. Why?&lt;/p&gt;

&lt;p&gt;I would say build systems stay true to the way of using commandline programs to achieve some task. This stackoverflow &lt;a href=&#34;http://stackoverflow.com/questions/16754643/what-is-gradle-in-android-studio&#34;&gt;post&lt;/a&gt; explains it nicely. Basically, it was difficult for you figure out how to build an apk without Eclipse. Google decided to make an Android plugin for gradle, thus, now its easier to make apks without an IDE. Furthermore, you can customize the way you want your package built. If you like to have resources put in a non-conventional folder, go ahead, just update the build script.&lt;/p&gt;

&lt;h1 id=&#34;gradle-init&#34;&gt;Gradle init&lt;/h1&gt;

&lt;p&gt;My motivation to use gradle came from the need to test some code or libraries without starting a fully fledged IDE. I discovered a useful plugin gradle has called the &lt;code&gt;Build Init Plugin&lt;/code&gt;. (&lt;a href=&#34;https://docs.gradle.org/current/userguide/build_init_plugin.html&#34;&gt;link&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;gradle init --type java-library
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With then one command I have a basic Java project setup and I can use something like Sublime Text and get going. As a bonus JUnit is included by default.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Uncle Bob Said</title>
      <link>https://robin-lee.github.io/blog/2016/07/uncle-bob-said/</link>
      <pubDate>Sun, 24 Jul 2016 22:10:37 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2016/07/uncle-bob-said/</guid>
      <description>

&lt;h1 id=&#34;inspirational-quotes&#34;&gt;Inspirational quotes&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;You dont go fast by writing crap”&lt;/p&gt;

&lt;p&gt;&amp;ldquo;You want to go fast, you do a good job”&lt;/p&gt;

&lt;p&gt;“Move deliberately, instead of rapidly&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Agile Software Development</title>
      <link>https://robin-lee.github.io/blog/2016/07/agile-software-development/</link>
      <pubDate>Sat, 23 Jul 2016 16:29:59 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2016/07/agile-software-development/</guid>
      <description>

&lt;h1 id=&#34;what-is-agile-software-development&#34;&gt;What is Agile Software Development?&lt;/h1&gt;

&lt;p&gt;It refers to adopting a set of practices or principles while developing software.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In early 2001, the Agile Alliance met to outine the values and principles that would allow software teams work together and respond to change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Agile Software Development, Principles, Patterns and Practices.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;things-that-got-my-attention&#34;&gt;Things that got my attention&lt;/h1&gt;

&lt;p&gt;1.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Agiles processes promote sustainable development. The sponsors, developers and users should be able to maintain constant pace indefinitely.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An agile project is not run like a 50-yard dash; it is run like a marathon. They run at a fast, sustainable pace. Running too fast often leads to burnout, shortcuts and debacle. &amp;hellip; A team is not allowed to work overtime. The only exception is the last week in a release.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Splitting, Spiking and Velocity. Any story too big should be split in stories that aren&amp;rsquo;t too big. After splitting, it should be reestiamted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Velocity is something like &amp;ldquo;2 days per story point&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-&amp;gt; Users can securely transfer money into, out of, and between their accounts.

becomes

-&amp;gt; Users can login
-&amp;gt; Users can logout
-&amp;gt; Users can deposit money into their account
-&amp;gt; Users can withdraw money from their account
-&amp;gt; Users can transfer money from their account to another account
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Intentional programming. You state your intent in a test before implementing it, making your intent as simple and readable as possible. The act of writing tests first is an act of discerning between design decisions. WumpusGame example: Integers instead of room object or game world?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;White box test: A test that knows and depends on its internal structure. (unit)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Black box test: A test that does&lt;/em&gt; &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;know or depend on its internal structure. (acceptance)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Always practice refactoring for every module you write and every module you maintain.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>SOLID Principles</title>
      <link>https://robin-lee.github.io/blog/2016/07/solid-principles/</link>
      <pubDate>Sat, 23 Jul 2016 14:46:47 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2016/07/solid-principles/</guid>
      <description>

&lt;p&gt;A set of principles to design or write &lt;strong&gt;classes&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;single-responsibility-principle&#34;&gt;Single Responsibility Principle&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;A class should have one, and only one, reason to change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;open-closed-principle&#34;&gt;Open - Closed Principle&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;You should be able to extend a classes behavior, without modifying it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;liskov-substitution-principle&#34;&gt;Liskov Substitution Principle&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Derived classes must be substitutable for their base classes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;interface-segregation-principle&#34;&gt;Interface Segregation Principle&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Make fine grained interfaces that are client specific.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;dependency-inversion-principle&#34;&gt;Dependency Inversion Principle&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Depend on abstractions, not on concretions.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Gson Custom Deserializer</title>
      <link>https://robin-lee.github.io/blog/2016/07/gson-custom-deserializer/</link>
      <pubDate>Tue, 12 Jul 2016 21:51:16 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2016/07/gson-custom-deserializer/</guid>
      <description>&lt;p&gt;When you develop an application, usually you will have to consume an API Service which might return some JSON data.
You might not need all values from the JSON data.&lt;/p&gt;

&lt;p&gt;The question is how do you process such data the &lt;em&gt;right&lt;/em&gt; way?&lt;/p&gt;

&lt;p&gt;Typically, you will retrieve the data using a HTTP client and then pass it on to a Object Relational Mapper.
In my experience APIs return data based on models crafted for the database, however, for client side applications the model
you design might be different from what the API returns you (due to application needs/ease of development). Hence, you need to extract part of it, transform it or map it differently.&lt;/p&gt;

&lt;p&gt;If you happen to use GSON and retrofit 2&amp;hellip; Perhaps this example will help you.&lt;/p&gt;

&lt;p&gt;Sample json data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{
  &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;: &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;2016-01-01T21:23:00&amp;quot;&lt;/span&gt;,
  &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;places&amp;quot;&lt;/span&gt;: [
    {
      &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;1&lt;/span&gt;,
      &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;amount&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;25&lt;/span&gt;
    },
    {
      &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;2&lt;/span&gt;,
      &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;amount&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;59&lt;/span&gt;
    },
    {
      &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;3&lt;/span&gt;,
      &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;amount&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;28&lt;/span&gt;
    },
    {
      &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;4&lt;/span&gt;,
      &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;amount&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;11&lt;/span&gt;
    }
  ]
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Lets say you just want the &amp;ldquo;list&amp;rdquo; of places.&lt;/p&gt;

&lt;p&gt;First define a model for each &amp;ldquo;Place&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;int&lt;/span&gt; id&lt;span style=&#34;color: #333333&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;int&lt;/span&gt; amount&lt;span style=&#34;color: #333333&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #888888&#34;&gt;//Constructors, getters and setters&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Define a custom deserializer for GSON with a main method for testing (or you could setup JUnit).&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #BB0066; font-weight: bold&#34;&gt;CustomPlaceDeserializer&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;implements&lt;/span&gt; JsonDeserializer&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;List&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;deserialize&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;JsonElement jsonElement&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; Type type&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; JsonDeserializationContext context&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;throws&lt;/span&gt; JsonParseException &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;

        JsonElement results &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; jsonElement&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;getAsJsonObject&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;places&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;

        &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;new&lt;/span&gt; Gson&lt;span style=&#34;color: #333333&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;fromJson&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;results&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; type&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color: #333333&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;

        &lt;span style=&#34;color: #888888&#34;&gt;//&lt;/span&gt;

        &lt;span style=&#34;color: #888888&#34;&gt;// Configure Gson&lt;/span&gt;
        GsonBuilder gsonBuilder &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;new&lt;/span&gt; GsonBuilder&lt;span style=&#34;color: #333333&#34;&gt;();&lt;/span&gt;
        Type listType &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;new&lt;/span&gt; TypeToken&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;ArrayList&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;Place&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&amp;gt;(){}.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;getType&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;();&lt;/span&gt;
        gsonBuilder&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;registerTypeAdapter&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;listType&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;new&lt;/span&gt; CustomPlaceDeserializer&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;Place&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;());&lt;/span&gt;
        Gson gson &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; gsonBuilder&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;();&lt;/span&gt;

        &lt;span style=&#34;color: #888888&#34;&gt;// The JSON data&lt;/span&gt;
        String jsonstring &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;replace this with sample json string&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;;&lt;/span&gt;

        &lt;span style=&#34;color: #888888&#34;&gt;// Parse JSON to Java&lt;/span&gt;
        List&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;Place&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; places &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; gson&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;fromJson&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;jsonstring&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; listType&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
        System&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;places&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you are using retrofit 2, it might look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Gson customGson &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;new&lt;/span&gt; GsonBuilder&lt;span style=&#34;color: #333333&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;registerTypeAdapter&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;listType&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;new&lt;/span&gt; CustomPlaceDeserializer&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;Place&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;())&lt;/span&gt;
                &lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>