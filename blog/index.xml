<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Robin Lee</title>
    <link>https://robin-lee.github.io/blog/</link>
    <description>Recent content in Blogs on Robin Lee</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 06 Sep 2017 19:08:21 +0800</lastBuildDate>
    
	<atom:link href="https://robin-lee.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Minimo Theme</title>
      <link>https://robin-lee.github.io/blog/minimo-theme/</link>
      <pubDate>Wed, 06 Sep 2017 19:08:21 +0800</pubDate>
      
      <guid>https://robin-lee.github.io/blog/minimo-theme/</guid>
      <description>Whew. I haven&amp;rsquo;t blogged in a while. To kick things off I&amp;rsquo;ve updated the theme to minimo.</description>
    </item>
    
    <item>
      <title>React Basics</title>
      <link>https://robin-lee.github.io/blog/react-basics/</link>
      <pubDate>Thu, 30 Mar 2017 17:40:03 +0800</pubDate>
      
      <guid>https://robin-lee.github.io/blog/react-basics/</guid>
      <description>Edit 14/6/17: Fix formatting.
ReactJS to learn React Native. Essentially, trying to follow the learning path here: link
Obviously, certain parts will be prioritised.
Skeleton App.js
import React from &#39;react&#39;; // Component with Stateless class App extends React.Component { render() { return &amp;lt;h1&amp;gt;Hello Guys&amp;lt;/h1&amp;gt; } } // Stateless component // const App = () =&amp;gt; &amp;lt;h1&amp;gt;Hello Eggheads&amp;lt;/h1&amp;gt; export default App;  index.html
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Intro&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script src=&amp;quot;index.</description>
    </item>
    
    <item>
      <title>Demystifying Tests</title>
      <link>https://robin-lee.github.io/blog/demystifying-tests/</link>
      <pubDate>Wed, 29 Mar 2017 18:55:10 +0800</pubDate>
      
      <guid>https://robin-lee.github.io/blog/demystifying-tests/</guid>
      <description>My rough notes on talk &amp;amp; workshop conducted by Christopher Rex. Code most by Sahil. QA ThoughtWorks 7 years.
Met Narain*, consultant for banks. He said the design and implementation of software is most important followed by knowledge of languages.
Met Raju*, ThoughtWorks. General conversation about school and ThoughtWorks. They have about 80 people here. &amp;lt; 20% operations.
Met Ika*, ThoughtWorks testing. Brought me to office.
github
Office 97 Browser &amp;lt;-&amp;gt; Monolithic App &amp;lt;-&amp;gt; Db</description>
    </item>
    
    <item>
      <title>Using ffmpeg to join videos</title>
      <link>https://robin-lee.github.io/blog/ffmpeg-joining-videos/</link>
      <pubDate>Tue, 14 Feb 2017 22:59:25 +0800</pubDate>
      
      <guid>https://robin-lee.github.io/blog/ffmpeg-joining-videos/</guid>
      <description>For a project, I had to join videos. Is there a tool that can help me? Yes. ffmpeg.
How to join videos with ffmpeg? ffmpeg has a concat command you can use. There are 2 modes demux and concat. demux is newer and better while concat is older and is support in older ffmpeg versions.
ffmpeg concatenate
For joining same codec and similar dimensions Step 1: Create list of videos you want to join in a txt file.</description>
    </item>
    
    <item>
      <title>Data mining capstone</title>
      <link>https://robin-lee.github.io/blog/data-mining-capstone/</link>
      <pubDate>Fri, 10 Feb 2017 09:18:21 +0800</pubDate>
      
      <guid>https://robin-lee.github.io/blog/data-mining-capstone/</guid>
      <description>Snippets of the data mining class.
Techniques  Frequency itemset mining Associated rules discovery Cluster analysis Outlier detection Classifier building  Association Rules Discovery Example of association rule.
Supermarket. Purchase history of people.
 large set of items. things sold. large set of baskets. each basket is a subset of items.     id items     1 Bread, Coke, Milk   2 Beer, Bread   3 Beer, Coke, Diaper, Milk    Association rules.</description>
    </item>
    
    <item>
      <title>4 Principles of Data Visualization</title>
      <link>https://robin-lee.github.io/blog/data-viz-capstone/</link>
      <pubDate>Fri, 03 Feb 2017 10:57:07 +0800</pubDate>
      
      <guid>https://robin-lee.github.io/blog/data-viz-capstone/</guid>
      <description>1. Above all else, show the data Minimize the administrative items on screen, maximize the information presented.
2. Prioritize the information Determine 3-5 most important information. Highlight them.
3. Relate the information Juxtapose, compose and reference the data so it is more meaningful.
4. Leverage the interactivity Overview, zoom, filter. You can reveal information gradually so it is not too clouded.
General  List, Categorise, Prioritise. How could the core data be more useful by showing related data around it?</description>
    </item>
    
    <item>
      <title>Gradle Init Java</title>
      <link>https://robin-lee.github.io/blog/gradle-init-java/</link>
      <pubDate>Sun, 29 Jan 2017 22:11:02 +0800</pubDate>
      
      <guid>https://robin-lee.github.io/blog/gradle-init-java/</guid>
      <description>Instead of starting a Java project using IntelliJ I experimented with the gradle init plugin. Recall: gradle init --type java-library. Originally, the idea was to have an easy way to start a project for Java but frankly speaking using an IDE already makes it easy enough. Although&amp;hellip; I like being able to do gradle run in terminal to execute my code.
Generated build.gradle apply plugin: &#39;java&#39; repositories { // Use &#39;jcenter&#39; for resolving your dependencies.</description>
    </item>
    
    <item>
      <title>Working with git submodules</title>
      <link>https://robin-lee.github.io/blog/github-submodules/</link>
      <pubDate>Thu, 29 Dec 2016 12:25:26 +0800</pubDate>
      
      <guid>https://robin-lee.github.io/blog/github-submodules/</guid>
      <description>After I did a clean install of OSX on my laptop I had to clone my blog repository and setup submodules again. This serves as a quick reference should I need to manage submodules again.
GitHub: Working with submodules
Removing git submodule deinit &amp;lt;asubmodule&amp;gt; git rm &amp;lt;asubmodule&amp;gt; # Note: asubmodule (no trailing slash)  # or, if you want to leave it in your working tree git rm --cached &amp;lt;asubmodule&amp;gt; rm -rf .</description>
    </item>
    
    <item>
      <title>Google DevFest 2016</title>
      <link>https://robin-lee.github.io/blog/google-devfest-2016/</link>
      <pubDate>Sat, 05 Nov 2016 12:30:25 +0800</pubDate>
      
      <guid>https://robin-lee.github.io/blog/google-devfest-2016/</guid>
      <description>Foreword These are my rough notes from Google DevFest 2016.
Pre-DevFest Met Gerard from gLabs and Kai from Grab.
Mockable Test http responses. Stub. Dummy object.
Welcome and GDG-SG Report Mr.Bharathi manages GDG-SG.
Events:
 I/O Extended: Recap I/O (Q3) GCP Next (Q2, cloud) Study Jams: Basic course on android. (Q1, Q4) Women Techmakers DevFest (Q4)  Google Developers (last 6 months)  Firebase (database stuff transform to ecosystem) Android7.</description>
    </item>
    
    <item>
      <title>Geek Camp 2016</title>
      <link>https://robin-lee.github.io/blog/geek-camp-2016/</link>
      <pubDate>Sat, 29 Oct 2016 10:46:49 +0800</pubDate>
      
      <guid>https://robin-lee.github.io/blog/geek-camp-2016/</guid>
      <description>Schedule  The Magic Behind Engineers.SG — Michael Cheng An Unexpected Use for a Cardboard Box: Listening to the Moon — Roland Turner Evolving Careers: How I Switched My Role from an Admin to a Javascript Developer — Leticia Choo Create a 3D Game Engine for Pebble Smartwatch — Shipeng Xu Rust: Make System Programming Great Again! — Omer Iqbal I left.  The Magic Behind Engineers.SG Sharing about the magic behind the scenes.</description>
    </item>
    
    <item>
      <title>MySQL Cheatsheet</title>
      <link>https://robin-lee.github.io/blog/mysql-cheatsheet/</link>
      <pubDate>Mon, 19 Sep 2016 15:35:25 +0800</pubDate>
      
      <guid>https://robin-lee.github.io/blog/mysql-cheatsheet/</guid>
      <description>A cheatsheet. Enough said.
show databases; select database(); show tables; create table cats (cid CHAR(20), name CHAR(30), breed CHAR(20), age INTEGER, cuteness REAL) insert into cats (cid, name, breed, age, cuteness) values (1, &#39;coolcat&#39;, &#39;garfield&#39;, 999, 3.14159265953) delete from cats cat where cat.name = &#39;gary&#39; update cats cat set cat.age = cat.age + 1, cat.cuteness = cat.cuteness + 999 where cat.cid = 1 // where clause is applied first // can use &amp;gt;= create table students (sid CHAR(20), name CHAR(30), login CHAR(30), age INTEGER, gpa REAL, UNIQUE (name, age), CONSTRAINT StudentKey PRIMARY KEY (sid) )  </description>
    </item>
    
    <item>
      <title>Beginning Spring Boot with Gradle</title>
      <link>https://robin-lee.github.io/blog/beginning-spring-boot/</link>
      <pubDate>Fri, 26 Aug 2016 16:03:00 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/beginning-spring-boot/</guid>
      <description>Spring Boot with Gradle because Maven is too verbose.
When I was looking for tutorials, it seemed like using gradle with Spring Boot is the lesser walked path. However, I think going down this path enables me to understand gradle better. This will be useful for Android development too.
It is to be noted that Spring has some integrations with the paid version of the IntelliJ IDEA IDE. As I am using the community edition, I will use the Spring CLI to setup the project.</description>
    </item>
    
    <item>
      <title>Cpp Basics 1</title>
      <link>https://robin-lee.github.io/blog/cpp-basics-1/</link>
      <pubDate>Fri, 19 Aug 2016 15:33:28 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/cpp-basics-1/</guid>
      <description>Algorithms and data structures are a central part of software development. I thought it would be reinforce the knowledge I have in this area. Competitions in this domain seem to favor cpp and knowing a variant of c better will certainly help when doing hardware programming. Hence, we eplore the basics of cpp before we move on to data structures and then algorithms.
A series in cpp begins. Naturally, it involves more than just language.</description>
    </item>
    
    <item>
      <title>Developing and Deploying Java Servlet Webapp</title>
      <link>https://robin-lee.github.io/blog/deploying-java-servlet-webapp-to-development-vm/</link>
      <pubDate>Fri, 12 Aug 2016 16:23:07 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/deploying-java-servlet-webapp-to-development-vm/</guid>
      <description>Developing You can find a few tutorials on how to create a basic (hello world) webapp with java servlets in eclipse so it will not be included here. As always my experience differs from such tutorials. It is never smooth sailing. You always have to configure or troubleshoot something even if your setup is exactly the same. The last time I did something with Servlets or JSP was in 2013 or 2014.</description>
    </item>
    
    <item>
      <title>Tomcat Development Server</title>
      <link>https://robin-lee.github.io/blog/tomcat-development-server/</link>
      <pubDate>Thu, 11 Aug 2016 23:13:48 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/tomcat-development-server/</guid>
      <description>I always wanted to learn some backend development seriously and finally I have the opportunity to do so. I have played around with server setup in the past but most of the information has been forgotten.
This time round a development server will be setup in virtualbox using ubuntu server 14.04 LTS (support expires 2019). For 16.04 LTS, I think the apt-get command is replace with apt and there are many new changes&amp;hellip; To save some time and focus on learning backend development sticking with 14.</description>
    </item>
    
    <item>
      <title>Fundamentals: Sockets</title>
      <link>https://robin-lee.github.io/blog/sockets/</link>
      <pubDate>Mon, 01 Aug 2016 11:59:12 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/sockets/</guid>
      <description>What is a socket? A socket is a tool that allows communication between two different processes on the same or different machines. To be more precise, it&amp;rsquo;s a way to talk to other computers using standard Unix file descriptors. In Unix, every I/O action is done by writing or reading a file descriptor. A file descriptor is just an integer associated with an open file and it can be a network connection, a text file, a terminal, or something else.</description>
    </item>
    
    <item>
      <title>Growing Object Oriented Software, Guided by Tests Part 1</title>
      <link>https://robin-lee.github.io/blog/goosgbt-1/</link>
      <pubDate>Wed, 27 Jul 2016 14:31:03 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/goosgbt-1/</guid>
      <description>In this series, I consolidate points from the GOOSGBT book and may comment on some of them. The post may not be coherent as I am extracting fragments I consider useful or enlightening.
Stackoverflow post to read: link
Levels of testing  Acceptance: Does the whole system work? Integration: Does our code work against code we can&amp;rsquo;t change? Unit: Do our objects do the right thing, are they convenient to work with?</description>
    </item>
    
    <item>
      <title>Gradle and gradle init</title>
      <link>https://robin-lee.github.io/blog/gradle-init/</link>
      <pubDate>Wed, 27 Jul 2016 10:56:29 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/gradle-init/</guid>
      <description>What is gradle? Gradle is an open source build automation system that builds upon the concepts of Apache Ant and Apache Maven and introduces a Groovy-based domain-specific language (DSL) instead of the XML form used by Apache Maven of declaring the project configuration. (wikipedia)
Here are more build tools from a stackoverflow post linked later:
 Apache Ant &amp;amp; Apache Maven - Java sbt (Simple Build Tool) - for Scala A-A-P - Python based build tool Rake (Apache Builder) - Ruby Leiningen for Clojure  There is gulpjs and gruntjs for Javascript too.</description>
    </item>
    
    <item>
      <title>Uncle Bob Said</title>
      <link>https://robin-lee.github.io/blog/uncle-bob-inspiration/</link>
      <pubDate>Sun, 24 Jul 2016 22:10:37 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/uncle-bob-inspiration/</guid>
      <description> Inspirational quotes  &amp;ldquo;You dont go fast by writing crap”
&amp;ldquo;You want to go fast, you do a good job”
“Move deliberately, instead of rapidly&amp;rdquo;
 </description>
    </item>
    
    <item>
      <title>Agile Software Development</title>
      <link>https://robin-lee.github.io/blog/agile/</link>
      <pubDate>Sat, 23 Jul 2016 16:29:59 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/agile/</guid>
      <description>What is Agile Software Development? It refers to adopting a set of practices or principles while developing software.
 In early 2001, the Agile Alliance met to outine the values and principles that would allow software teams work together and respond to change.
 Agile Software Development, Principles, Patterns and Practices.
Things that got my attention 1.
 Agiles processes promote sustainable development. The sponsors, developers and users should be able to maintain constant pace indefinitely.</description>
    </item>
    
    <item>
      <title>SOLID Principles</title>
      <link>https://robin-lee.github.io/blog/solid/</link>
      <pubDate>Sat, 23 Jul 2016 14:46:47 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/solid/</guid>
      <description>A set of principles to design or write classes.
Single Responsibility Principle  A class should have one, and only one, reason to change.
 Open - Closed Principle  You should be able to extend a classes behavior, without modifying it.
 Liskov Substitution Principle  Derived classes must be substitutable for their base classes.
 Interface Segregation Principle  Make fine grained interfaces that are client specific.</description>
    </item>
    
    <item>
      <title>Gson Custom Deserializer</title>
      <link>https://robin-lee.github.io/blog/gson-custom-deserializer/</link>
      <pubDate>Tue, 12 Jul 2016 21:51:16 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/gson-custom-deserializer/</guid>
      <description>When you develop an application, usually you will have to consume an API Service which might return some JSON data. You might not need all values from the JSON data.
The question is how do you process such data the right way?
Typically, you will retrieve the data using a HTTP client and then pass it on to a Object Relational Mapper. In my experience APIs return data based on models crafted for the database, however, for client side applications the model you design might be different from what the API returns you (due to application needs/ease of development).</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://robin-lee.github.io/blog/hello-world/</link>
      <pubDate>Sun, 10 Jul 2016 14:29:34 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/hello-world/</guid>
      <description>Whoopee! Hugo, with the cocoa theme!
Furthermore, some old posts have been shifted over from pelican!
Check out how to use hugo here</description>
    </item>
    
    <item>
      <title>Virtual Box Shared Folder</title>
      <link>https://robin-lee.github.io/blog/virtual-box-shared-folder/</link>
      <pubDate>Sat, 06 Feb 2016 21:41:18 +0800</pubDate>
      
      <guid>https://robin-lee.github.io/blog/virtual-box-shared-folder/</guid>
      <description>For some projects I need to share files between my virtual machine and my host machine. VirtualBox allows for shared folders between the VM and the host after install Guest Additions. However, there is always a bit of configuration involved.
I installed Ubuntu 14.04 LTS and then installed Guest Additions. After I added a shared folder in the settings, I discovered that I did not have permission to access the folder.</description>
    </item>
    
    <item>
      <title>Forcing Display Edid</title>
      <link>https://robin-lee.github.io/blog/forcing-display-edid/</link>
      <pubDate>Fri, 05 Feb 2016 22:02:00 +0800</pubDate>
      
      <guid>https://robin-lee.github.io/blog/forcing-display-edid/</guid>
      <description>I bought a 2 port VGA Switcher off Taobao so that I could switch my main display between my desktop and laptop. However, when I connected my Macbook through the VGA adapter to the VGA Switcher my screen was not appearing correctly. It was shifted off screen to the right.
This is the 2 port VGA Switcher I bought off Taobao. It is a nice compact device with tacty buttons you can press to switch the the video input.</description>
    </item>
    
    <item>
      <title>Learning Regex</title>
      <link>https://robin-lee.github.io/blog/learning-regex/</link>
      <pubDate>Tue, 15 Sep 2015 23:21:45 +0800</pubDate>
      
      <guid>https://robin-lee.github.io/blog/learning-regex/</guid>
      <description>I think regular expressions are essential when it comes to extracting data from a source.
For example if you wanted the names of all the files in a folder without the extensio, using a regular expression could make the process easier and code more concise.
The difficulty is finding the material to practice on even with a cheatsheet for regex.
I found this site called regexone and I felt the tutorial reflected certain real life situations.</description>
    </item>
    
  </channel>
</rss>