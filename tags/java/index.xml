<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Robin Lee</title>
    <link>https://robin-lee.github.io/tags/java/index.xml</link>
    <description>Recent content on Robin Lee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://robin-lee.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Beginning Spring Boot with Gradle</title>
      <link>https://robin-lee.github.io/blog/2016/08/beginning-spring-boot-with-gradle/</link>
      <pubDate>Fri, 26 Aug 2016 16:03:00 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2016/08/beginning-spring-boot-with-gradle/</guid>
      <description>

&lt;p&gt;Spring Boot with Gradle because Maven is too verbose.&lt;/p&gt;

&lt;p&gt;When I was looking for tutorials, it seemed like using gradle with Spring Boot is the lesser walked path.
However, I think going down this path enables me to understand gradle better. This will be useful for Android development too.&lt;/p&gt;

&lt;p&gt;It is to be noted that Spring has some integrations with the paid version of the IntelliJ IDEA IDE. As I am using the community edition, I will use the Spring CLI to setup the project. Furthermore, it simulates the scenario where you are a contractor and you have a one off project that requires Spring Boot. You might not like spending a few hundred dollars on a new IDE which you will have to spend time getting familiar with. IntelliJ IDEA Community Edition is great for writing code once you have the initial setup done.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; This post is much messier than I expected. I jumped ahead to build my photo blog. So much configuration and testing was involved in this side project. As such I do not think this post will make much sense for the general reader. If you happen to be trying something more than a hello world or step-by-step tutorial this might be of help.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.spring.io/spring-boot/docs/current/reference/html/cli-using-the-cli.html&#34;&gt;Spring Boot Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Pro-Spring-Boot-Felipe-Gutierrez/dp/1484214323/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1471961344&amp;amp;sr=1-1&#34;&gt;Pro Spring Boot by Felipe Gutierrez of PivotalLabs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;

&lt;p&gt;The assumption here is that you have sprint boot already installed to your commandline.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;spring init&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spring init --build=gradle --java-version=1.8 --dependencies=web,thymeleaf --package=codes.robin.spring --artifactId=codes.robin.spring --groupId=codes.robin.spring --packaging=war --name=spring-boot-web -x

spring init --build=gradle -d=jpa,h2 -g=codes.robin.spring -a=simple-jpa-app --package-name=code.robin.spring -name=simple-jpa-app --packaging=war

spring init --build=gradle -d=web,thymeleaf,data-jpa,data-rest -g=codes.robin.spring -a=spring-boot-journal --package-name=codes.robin.spring -name=spring-boot-journal -x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-x&lt;/code&gt; extracts the project into your current directory if location is not specified.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.spring.io/spring-boot/docs/current/reference/html/cli-using-the-cli.html&#34;&gt;Spring Boot CLI Docs&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;running-configurations&#34;&gt;Running &amp;amp; Configurations&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;gradle build

gradle bootRun
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try &lt;code&gt;localhost:8080&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;1 way to change port:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myapp/
    src/
    gradle/
    config/
        application.properties # add a line &amp;quot;server.port=8090&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/21083170/spring-boot-how-to-configure-port&#34;&gt;Stack link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can retrieve the values of the properties in the file by using the following annotation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Value(&amp;quot;${server.port}&amp;quot;)
private String port;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Spring also offers a way to configure separate profiles using application-{profile}.properties files. This is really useful if you have different environments. You really should have separate environments for dev and prod.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;application-dev.properties
    server.ip=localhost

application-prod.properties
    server.ip=http//cool-server.com

gradle bootRun -Dspring.profiles.active=dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;not-so-minimum-code&#34;&gt;(Not so) Minimum code&lt;/h2&gt;

&lt;h3 id=&#34;folder-structure&#34;&gt;Folder structure&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;src/
  domain # Models
  repository # Repository, JPA/Custom Queries
  web # Controllers
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;controller&#34;&gt;Controller&lt;/h3&gt;

&lt;p&gt;Using Spring &lt;code&gt;@Controller&lt;/code&gt; annotation.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@RestController&lt;/code&gt; could be used too. &lt;a href=&#34;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A convenience annotation that is itself annotated with @Controller and @ResponseBody.
Types that carry this annotation are treated as controllers where @RequestMapping methods assume @ResponseBody semantics by default. Additionally, if you want to set response codes. Just pass &lt;code&gt;HttpServletResponse response&lt;/code&gt; to the method like &lt;code&gt;someMethod(ttpServletResponse response)&lt;/code&gt; and set &lt;code&gt;response.setStatus(HttpServletResponse.SC_ACCEPTED);&lt;/code&gt;. &lt;a href=&#34;http://stackoverflow.com/questions/24292373/spring-boot-rest-controller-how-to-return-different-http-status-codes&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@ModelAttribute&lt;/code&gt; tells Spring to use its default web data binder to populate an instance of something with data from the HttpServletRequest. Choosing to pass this data back to the view is up to the programmer. When you have a method annotated with @ModelAttribute, it is being called every time code hits that servlet. When you have @ModelAttribute as one of the method&amp;rsquo;s parameters, we are talking about incoming Http form data-binding. &lt;a href=&#34;http://stackoverflow.com/questions/29370581/spring-mvc-please-explain-difference-between-requestparam-and-modelattribute&#34;&gt;link&lt;/a&gt; &lt;a href=&#34;http://stackoverflow.com/questions/29370581/spring-mvc-please-explain-difference-between-requestparam-and-modelattribute&#34;&gt;link&lt;/a&gt; &lt;a href=&#34;http://stackoverflow.com/questions/3423262/what-is-modelattribute-in-spring-mvc&#34;&gt;link&lt;/a&gt; &lt;a href=&#34;http://stackoverflow.com/questions/8688135/modelattribute-annotation-when-to-use-it/26916920#26916920&#34;&gt;very detailed link&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TODO: &lt;code&gt;ResponseEntity&amp;lt;?&amp;gt;&lt;/code&gt; vs &lt;code&gt;@ResponseBody&lt;/code&gt;. When to use?&lt;/li&gt;
&lt;li&gt;TODO: Pagination? Instead of loading all image posts at once, load them in stages.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@Controller&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #BB0066; font-weight: bold&#34;&gt;BasicController&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #888888&#34;&gt;//This is similar to @Inject (part of the JSR-330)&lt;/span&gt;
    &lt;span style=&#34;color: #888888&#34;&gt;//http://stackoverflow.com/questions/19414734/understanding-spring-autowired-usage&lt;/span&gt;
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@Autowired&lt;/span&gt;
    SomeRespository repo&lt;span style=&#34;color: #333333&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@ResponseBody&lt;/span&gt;
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(){&lt;/span&gt;
        &lt;span style=&#34;color: #888888&#34;&gt;//return NAME of html page (eg. index.html)&lt;/span&gt;
        &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;Greetings from spring boot!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;/someResource&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; method &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; RequestMethod&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;GET&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;someResource&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;HttpServletResponse response&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #888888&#34;&gt;//can change this to by default return a list?&lt;/span&gt;
        response&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;setStatus&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;HttpServletResponse&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;SC_OK&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;
            response&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;getWriter&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;write&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;Some useful message.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
            response&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;getWriter&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;flush&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;();&lt;/span&gt;
            response&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;getWriter&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;Exception ex&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;
            log&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;Argh, the AIs are rebelling! &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; ex&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;/upload&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; method &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; RequestMethod&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;POST&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@ResponseBody&lt;/span&gt;
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;public&lt;/span&gt; ResponseEntity&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; uploadFile&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;
            &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@RequestParam&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; MultipartFile file&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@RequestParam&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; required &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; String description&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;

        &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #888888&#34;&gt;// process multipart file&lt;/span&gt;
        &lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;
            System&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;getMessage&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;());&lt;/span&gt;
            &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;new&lt;/span&gt; ResponseEntity&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;HttpStatus&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;BAD_REQUEST&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;new&lt;/span&gt; ResponseEntity&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;HttpStatus&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;OK&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;/submitInfo&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; method &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; RequestMethod&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;POST&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@ResponseBody&lt;/span&gt;
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;someInfoFromAForm&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@ModelAttribute&lt;/span&gt; SomeObject someObject&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #888888&#34;&gt;//ModelAttribute is not actually required here&lt;/span&gt;

      &lt;span style=&#34;color: #888888&#34;&gt;//use getters&lt;/span&gt;

      &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; payload&lt;span style=&#34;color: #333333&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;References:
-&lt;a href=&#34;https://github.com/jdmr/fileUpload/blob/master/src/main/java/org/davidmendoza/fileUpload/web/ImageController.java&#34;&gt;davidmendoza&lt;/a&gt;
-&lt;a href=&#34;https://github.com/netgloo/spring-boot-samples/blob/master/spring-boot-file-upload-with-ajax/src/main/java/netgloo/controllers/MainController.java&#34;&gt;netgloo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;repository&#34;&gt;Repository&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #BB0066; font-weight: bold&#34;&gt;SomeRepository&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;extends&lt;/span&gt; JpaRepository&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;SomeObject&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; Long&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #888888&#34;&gt;//examples&lt;/span&gt;
repo&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;save&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;SomeObject&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
repo&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;findAll&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;();&lt;/span&gt;
repo&lt;span style=&#34;color: #333333&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000CC&#34;&gt;getOne&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; id&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Extended from:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #BB0066; font-weight: bold&#34;&gt;JpaRepository&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; ID &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;extends&lt;/span&gt; Serializable&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;extends&lt;/span&gt; PagingAndSortingRepository&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #333333&#34;&gt;,&lt;/span&gt; ID&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;
    List&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;findAll&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;();&lt;/span&gt;
    List&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;findAll&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;Sort sort&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
    List&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;findAll&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;Iterable&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;ID&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; ids&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;S &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;extends&lt;/span&gt; T&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; List&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;S&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;save&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;Iterable&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;S&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; entities&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;flush&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;S &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;extends&lt;/span&gt; T&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; S &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;saveAndFlush&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;S entity&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;deleteInBatch&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;Iterable&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt; entities&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;deleteAllInBatch&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;();&lt;/span&gt;
    T &lt;span style=&#34;color: #0066BB; font-weight: bold&#34;&gt;getOne&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;ID id&lt;span style=&#34;color: #333333&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;domain&#34;&gt;Domain&lt;/h3&gt;

&lt;p&gt;Using JPA you need to have &lt;code&gt;@Entity&lt;/code&gt;.
&lt;code&gt;@Transient&lt;/code&gt; means it won&amp;rsquo;t be added to database. Some metadata.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Entity
public class SomeObject {

  @Id
  @GeneratedValue(strategy= GenerationType.AUTO)
  private Long id;

  private String description;
  private Date created;

  @Transient
  private SimpleDateFormat format = new SimpleDateFormat(&amp;quot;MM/dd/yyyy&amp;quot;);

  public SomeObject(String description, String date) throws ParseException{
      this.description = description;
      this.created = format.parse(date);
  }

  public SomeObject() {}

  //getters &amp;amp; setters

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;useful-things&#34;&gt;Useful things&lt;/h2&gt;

&lt;h3 id=&#34;curl-to-post-json&#34;&gt;cURL to post json&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;curl -X POST -d &#39;{&amp;quot;title&amp;quot;:&amp;quot;Test Spring Boot&amp;quot;,&amp;quot;created&amp;quot;:&amp;quot;06/18/2016&amp;quot;,&amp;quot;summary&amp;quot;:&amp;quot;Create Unit
Test for Spring Boot&amp;quot;}&#39; -H &amp;quot;Content-Type: application/json&amp;quot; http://localhost:8080/journal
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;testing&#34;&gt;Testing&lt;/h3&gt;

&lt;p&gt;If you do &lt;code&gt;gradle test&lt;/code&gt; it runs the tests and generates a html report in the &lt;code&gt;build/tests&lt;/code&gt; folder.
It would be nice to see the results immediately in terminal. &lt;a href=&#34;https://www.mkyong.com/gradle/gradle-display-test-results-in-console/&#34;&gt;link&lt;/a&gt;
Add the following to &lt;code&gt;build.gradle&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test {
    //we want display the following test events
    testLogging {
        events &amp;quot;PASSED&amp;quot;, &amp;quot;STARTED&amp;quot;, &amp;quot;FAILED&amp;quot;, &amp;quot;SKIPPED&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;accessing-h2-in-memory-test-database&#34;&gt;Accessing H2 In-Memory Test Database&lt;/h3&gt;

&lt;p&gt;Ensure &lt;code&gt;application.properties&lt;/code&gt; has:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spring.h2.console.enabled=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to &lt;code&gt;http://localhost:8080/h2-console/&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;By default it will have the org.h2.Driver driver class, which is the connection URL as
jdbc:h2:mem:testdb and the
username: sa
password: empty
to connect to the H2 engine.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;using-curl-to-upload-post-data-with-files&#34;&gt;Using cURL to upload post data with files&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/12667797/using-curl-to-upload-post-data-with-files&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;-F&lt;/code&gt; option:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-F/--form &amp;lt;name=content&amp;gt; Specify HTTP multipart POST data (H)`
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;curl \
  -F &amp;quot;userid=1&amp;quot; \
  -F &amp;quot;filecomment=This is an image file&amp;quot; \
  -F &amp;quot;image=@/home/user1/Desktop/test.jpg&amp;quot; \
  localhost/uploader.php
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;curl -i -X POST -H &amp;quot;Content-Type: multipart/form-data&amp;quot;
-F &amp;quot;data=@test.mp3&amp;quot; http://mysuperserver/media/1234/upload/

# when userid is cached as part of form
curl -i -X POST -H &amp;quot;Content-Type: multipart/form-data&amp;quot; -F &amp;quot;data=@test.mp3;userid=1234&amp;quot; http://localhost:8080/upload/

curl -i -X POST -H &amp;quot;Content-Type: multipart/form-data&amp;quot; -F file=@phoduckdp.jpg -F description=blah http://localhost:8080/upload/

curl -v -F description=value1 -F file=@phoduckdp.jpg http://localhost:8080/upload/

# GET verbose
curl -v http://localhost:8080/photos
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;curl-with-auth&#34;&gt;cURL with auth&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;curl -i localhost:8080/oauth/token -d &amp;quot;grant_type=password&amp;amp;scope=read&amp;amp;username=springb
oot&amp;amp;password=isawesome&amp;quot; -u acd167f6-04f8-4306-a118-03e2356f73aa:2dd4bec5-fe62-4568-94a1-
c31ac3c4eb4e

curl -i -H &amp;quot;Authorization: bearer f1d362f2-b167-41d9-a411-35f8ba7f0454&amp;quot; localhost:8080/api
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mysql&#34;&gt;MySQL&lt;/h3&gt;

&lt;p&gt;Assuming you have it installed on OSX.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew info mysql

To have launchd start mysql now and restart at login:
  brew services start mysql
Or, if you don&#39;t want/need a background service you can just run:
  mysql.server start

To stop
  mysql.server stop
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;getting-properties-config&#34;&gt;Getting properties/config&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;@Value(&amp;quot;${file.upload.directory}&amp;quot;)
private String fileUploadDirectory;

//OR

String directory = env.getProperty(&amp;quot;file.upload.directory&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;optional-url-path&#34;&gt;Optional URL path&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/4904092/with-spring-3-0-can-i-make-an-optional-path-variable&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;livereload-setup&#34;&gt;LiveReload setup&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; In the end I just included the &lt;code&gt;devtools&lt;/code&gt; dependency and used the &lt;code&gt;make&lt;/code&gt; command in the IDE before refreshing in the browser. Static files are still updated. However, when it comes to javascript I prefer having a setup that enables me to see the changes immediately (actually livereloading) so I think developing the UI &amp;amp; frontend in a separate project would be better.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/continuous-auto-restart-with-spring-boot-devtools&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add to build.gradle;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;configurations {
    dev
}

# under dependencies
dev(&amp;quot;org.springframework.boot:spring-boot-devtools&amp;quot;)


# hmm
bootRun {
    // Use Spring Boot DevTool only when we run Gradle bootRun task
    classpath = sourceSets.main.runtimeClasspath + configurations.dev
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;h2-database-config&#34;&gt;H2 Database config&lt;/h3&gt;

&lt;p&gt;If nothing is specified in &lt;code&gt;application.properties&lt;/code&gt;, h2 uses in mem.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spring.datasource.url = jdbc:h2:mem:testdb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A persistent db can be useful for testing. This setting doesn&amp;rsquo;t work nicely with &lt;code&gt;gradle build --continuous&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spring.datasource.url=jdbc:h2:~/test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.jpa.hibernate.ddl-auto=update
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sample-application-properties&#34;&gt;Sample &lt;code&gt;application.properties&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;file.upload.directory=/home/someuser/tomcat-data-directory

spring.h2.console.enabled=true

#JPA-Hibernate
spring.jpa.show-sql = true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

spring.datasource.url=jdbc:h2:/home/someuser/tomcat-data-directory/testdb;DB_CLOSE_ON_EXIT=FALSE

#Spring DataSource SQL
#spring.datasource.url = jdbc:mysql://localhost:3306/cooldatabase
#spring.datasource.username = root
#spring.datasource.password =

spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Developing and Deploying Java Servlet Webapp</title>
      <link>https://robin-lee.github.io/blog/2016/08/developing-and-deploying-java-servlet-webapp/</link>
      <pubDate>Fri, 12 Aug 2016 16:23:07 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2016/08/developing-and-deploying-java-servlet-webapp/</guid>
      <description>

&lt;h2 id=&#34;developing&#34;&gt;Developing&lt;/h2&gt;

&lt;p&gt;You can find a few tutorials on how to create a basic (hello world) webapp with java servlets in eclipse so it will not be included here.
As always my experience differs from such tutorials. It is never smooth sailing. You always have to configure or troubleshoot something even if your setup is &lt;em&gt;exactly&lt;/em&gt; the same. The last time I did something with Servlets or JSP was in 2013 or 2014. I don&amp;rsquo;t think I have my notes from then.&lt;/p&gt;

&lt;p&gt;This time round I had to do some tweaking to get Eclipse to recognise the tomcat server installed on OSX (not the VM, thats working well). For some reason it didn&amp;rsquo;t recognize tomcat 8.5.*.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;You have to patch catalina.jar, as this is version number the WTP adapter looks at. It&#39;s a quite useless check, and the adapter should allow you to start the server anyway, but nobody has though of that yet.

For years and with every version of Tomcat this is always a problem.

To patch you can do the following:

cd [tomcat or tomee home]/lib
mkdir catalina
cd catalina/
unzip ../catalina.jar
vim org/apache/catalina/util/ServerInfo.properties
Make sure it looks like the following (the version numbers all need to start with 8.0):

server.info=Apache Tomcat/8.0.0
server.number=8.0.0
server.built=May 11 2016 21:49:07 UTC
Then:

jar uf ../catalina.jar org/apache/catalina/util/ServerInfo.properties
cd ..
rm -rf catalina
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/37024876/how-to-use-tomcat-8-5-x-and-tomee-7-x-with-eclipse&#34;&gt;stack link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once this was done, I could develop and test my webapp in Eclipse.&lt;/p&gt;

&lt;h2 id=&#34;deploying&#34;&gt;Deploying&lt;/h2&gt;

&lt;p&gt;To me, running the webapp in the IDE is not deploying. There were a few tutorials with misleading titles.&lt;/p&gt;

&lt;p&gt;I was told that to deploy an webapp is bascially copying a war archive into a directory for tomcat. To have a 2nd opinion, I found this &lt;a href=&#34;http://www.vogella.com/tutorials/EclipseWTP/article.html&#34;&gt;vogella tutorial&lt;/a&gt;. Vogella has been consistent in providing great tutorials to help you get started.&lt;/p&gt;

&lt;p&gt;In Eclipse, you just right click on the root package for your webapp and export as a &lt;code&gt;war archive&lt;/code&gt; and save it somewhere.&lt;/p&gt;

&lt;p&gt;To transfer the file to the VM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scp &amp;lt;filename&amp;gt;.war tomcatuser@192.168.56.101:/home/&amp;lt;vm user&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And via ssh in &lt;code&gt;/opt/tomcat&lt;/code&gt; (assuming you set up tomcat here and service is called tomcat8):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp ~/&amp;lt;filename&amp;gt;.war webapps/
sudo service tomcat8 restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now going to &lt;code&gt;&amp;lt;url&amp;gt;:8080/&amp;lt;filename&amp;gt;/&amp;lt;classname&amp;gt;&lt;/code&gt; should load your webpage or whatever response you made.
You could change the URL by specifying configurations in a &lt;code&gt;web.xml&lt;/code&gt; but that will not be covered here&amp;hellip; for now?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Growing Object Oriented Software, Guided by Tests Part 1</title>
      <link>https://robin-lee.github.io/blog/2016/07/growing-object-oriented-software-guided-by-tests-part-1/</link>
      <pubDate>Wed, 27 Jul 2016 14:31:03 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2016/07/growing-object-oriented-software-guided-by-tests-part-1/</guid>
      <description>

&lt;p&gt;In this series, I consolidate points from the GOOSGBT book and may comment on some of them.
The post may not be coherent as I am extracting fragments I consider useful or enlightening.&lt;/p&gt;

&lt;p&gt;Stackoverflow post to read: &lt;a href=&#34;http://stackoverflow.com/questions/920992/unit-test-adoption/924639#924639&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;levels-of-testing&#34;&gt;Levels of testing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Acceptance: Does the whole system work?&lt;/li&gt;
&lt;li&gt;Integration: Does our code work against code we can&amp;rsquo;t change?&lt;/li&gt;
&lt;li&gt;Unit: Do our objects do the right thing, are they convenient to work with?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;support-for-tdd-with-mock-objects&#34;&gt;Support for TDD with mock objects&lt;/h2&gt;

&lt;p&gt;The essential steps for creating a test:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create any required mock objects.&lt;/li&gt;
&lt;li&gt;Create any real objects, including the target object.&lt;/li&gt;
&lt;li&gt;Specify how you expect the mock objects to be called by the target object.&lt;/li&gt;
&lt;li&gt;Call the triggering method(s) on the target object.&lt;/li&gt;
&lt;li&gt;Assert that any resulting values are valid and that all the expected calls have been made.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The important point, as we stress repeatedly throughout this book, is to make clear the intention of every test, distinguishing between the tested functionality, the supporting infrastructure, and the object structure.&lt;/p&gt;

&lt;h2 id=&#34;test-fixture&#34;&gt;Test Fixture&lt;/h2&gt;

&lt;p&gt;A test fixture is the fixed state that exists at the start of a test. A test fixture ensures that a test is repeatable—every time a test is run it starts in the same state so it should produce the same results. A fixture may be set up before the test runs and torn down after it has finished. Think of &lt;code&gt;@Before&lt;/code&gt; and &lt;code&gt;@After&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;mocking&#34;&gt;Mocking&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Notes here are for jMock2. In the neigbourhood of page 26.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A mockery represents the context of the object under test, its neighboring objects; mock objects stand in for the real neighbors of the object under test while the test runs; and expectations describe how the object under test should invoke its neighbors during the test.&lt;/p&gt;

&lt;p&gt;Note that the test does not require any assertions. This is quite common in mock object tests.&lt;/p&gt;

&lt;h2 id=&#34;walking-skeleton&#34;&gt;Walking Skeleton&lt;/h2&gt;

&lt;p&gt;We can’t automate the build, deploy, and test cycle without some idea of the overall structure. We don’t need much detail yet, just a broad-brush picture of what major system components will be needed to support the first planned release and how they will communicate.&lt;/p&gt;

&lt;p&gt;We need a high-level view of the client’s requirements, both functional and non- functional, to guide our choices.&lt;/p&gt;

&lt;h2 id=&#34;unit-test-behaviour-not-methods&#34;&gt;Unit-Test Behaviour Not Methods&lt;/h2&gt;

&lt;p&gt;Many developers who adopt TDD find their early tests hard to understand when they revisit them later, and one common mistake is thinking about testing methods. A test called testBidAccepted() tells us what it does, but not what it’s for.&lt;/p&gt;

&lt;p&gt;We do better when we focus on the &lt;strong&gt;features that the object under test should provide&lt;/strong&gt;, each of which may require collaboration with its neighbors and calling more than one of its methods. We need to know how to use the class to achieve a goal, *&lt;strong&gt;not&lt;/strong&gt; how to exercise all the paths through its code*.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sniperJoinsAuctionUntilAuctionCloses()&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;object-oriented-style&#34;&gt;Object - Oriented Style&lt;/h1&gt;

&lt;p&gt;We value code that is easy to maintain over code that is easy to write.1 Imple- menting a feature in the most direct way can damage the maintainability of the system, for example by making the code difficult to understand or by introducing hidden dependencies between components. Balancing immediate and longer-term concerns is often tricky, but we’ve seen too many teams that can no longer deliver because their system is too brittle.&lt;/p&gt;

&lt;p&gt;We don’t want technical concepts to leak into the application model, so we write interfaces to describe its relationships with the outside world in its terminology (Cockburn’s ports). Then we write bridges between the application core and each technical domain (Cockburn’s adapters). This is related to what Eric Evans calls an “anticorruption layer” [Evans03].&lt;/p&gt;

&lt;h2 id=&#34;achieving-object-oriented-design&#34;&gt;Achieving Object Oriented Design&lt;/h2&gt;

&lt;p&gt;Breaking off, Budding out, Bundling up&lt;/p&gt;

&lt;p&gt;Budding Out.&lt;/p&gt;

&lt;p&gt;We think of this as “on-demand” design: we “pull” interfaces and their imple- mentations into existence from the needs of the client, rather than “pushing” out the features that we think a class should provide.&lt;/p&gt;

&lt;h2 id=&#34;building-up-to-higher-level-programming&#34;&gt;Building up to higher level programming&lt;/h2&gt;

&lt;p&gt;The declarative layer describes what the code will do, while the implementation layer describes how the code does it. The declarative layer is, in effect, a small domain-specific language embedded (in this case) in Java.&lt;/p&gt;

&lt;h2 id=&#34;building-on-third-party-code&#34;&gt;Building on Third Party Code&lt;/h2&gt;

&lt;h3 id=&#34;only-mock-objects-you-own&#34;&gt;Only mock objects you own&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;When we use third-party code we often do not have a deep understanding of how it works. Even if we have the source available, we rarely have time to read it thoroughly enough to explore all its quirks. We can read its documentation, which is often incomplete or incorrect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah tell me about it.&lt;/p&gt;

&lt;p&gt;Part 2 will be on the worked example.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gradle and gradle init</title>
      <link>https://robin-lee.github.io/blog/2016/07/gradle-and-gradle-init/</link>
      <pubDate>Wed, 27 Jul 2016 10:56:29 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2016/07/gradle-and-gradle-init/</guid>
      <description>

&lt;h1 id=&#34;what-is-gradle&#34;&gt;What is gradle?&lt;/h1&gt;

&lt;p&gt;Gradle is an open source &lt;strong&gt;build automation system&lt;/strong&gt; that builds upon the concepts of Apache Ant and Apache Maven and introduces a Groovy-based domain-specific language (DSL) instead of the XML form used by Apache Maven of declaring the project configuration.
(&lt;a href=&#34;https://en.wikipedia.org/wiki/Gradle&#34;&gt;wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Here are more build tools from a stackoverflow post linked later:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apache Ant &amp;amp; Apache Maven - Java&lt;/li&gt;
&lt;li&gt;sbt (Simple Build Tool) - for Scala&lt;/li&gt;
&lt;li&gt;A-A-P - Python based build tool&lt;/li&gt;
&lt;li&gt;Rake (Apache Builder) - Ruby&lt;/li&gt;
&lt;li&gt;Leiningen for Clojure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is gulpjs and gruntjs for Javascript too.&lt;/p&gt;

&lt;h1 id=&#34;gradle-and-android-studio&#34;&gt;Gradle and Android Studio&lt;/h1&gt;

&lt;p&gt;You used to use Eclipse to develop for Android. Later, the main IDE changed to Android Studio and together with it came gradle. Why?&lt;/p&gt;

&lt;p&gt;I would say build systems stay true to the way of using commandline programs to achieve some task. This stackoverflow &lt;a href=&#34;http://stackoverflow.com/questions/16754643/what-is-gradle-in-android-studio&#34;&gt;post&lt;/a&gt; explains it nicely. Basically, it was difficult for you figure out how to build an apk without Eclipse. Google decided to make an Android plugin for gradle, thus, now its easier to make apks without an IDE. Furthermore, you can customize the way you want your package built. If you like to have resources put in a non-conventional folder, go ahead, just update the build script.&lt;/p&gt;

&lt;h1 id=&#34;gradle-init&#34;&gt;Gradle init&lt;/h1&gt;

&lt;p&gt;My motivation to use gradle came from the need to test some code or libraries without starting a fully fledged IDE. I discovered a useful plugin gradle has called the &lt;code&gt;Build Init Plugin&lt;/code&gt;. (&lt;a href=&#34;https://docs.gradle.org/current/userguide/build_init_plugin.html&#34;&gt;link&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;gradle init --type java-library
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With then one command I have a basic Java project setup and I can use something like Sublime Text and get going. As a bonus JUnit is included by default.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>