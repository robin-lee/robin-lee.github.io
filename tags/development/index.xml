<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Robin Lee</title>
    <link>https://robin-lee.github.io/tags/development/</link>
    <description>Recent content in Development on Robin Lee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Jul 2016 10:56:29 +0200</lastBuildDate>
    <atom:link href="https://robin-lee.github.io/tags/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Gradle and gradle init</title>
      <link>https://robin-lee.github.io/blog/gradle-and-gradle-init/</link>
      <pubDate>Wed, 27 Jul 2016 10:56:29 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/gradle-and-gradle-init/</guid>
      <description>

&lt;h1 id=&#34;what-is-gradle&#34;&gt;What is gradle?&lt;/h1&gt;

&lt;p&gt;Gradle is an open source &lt;strong&gt;build automation system&lt;/strong&gt; that builds upon the concepts of Apache Ant and Apache Maven and introduces a Groovy-based domain-specific language (DSL) instead of the XML form used by Apache Maven of declaring the project configuration.
(&lt;a href=&#34;https://en.wikipedia.org/wiki/Gradle&#34;&gt;wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Here are more build tools from a stackoverflow post linked later:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apache Ant &amp;amp; Apache Maven - Java&lt;/li&gt;
&lt;li&gt;sbt (Simple Build Tool) - for Scala&lt;/li&gt;
&lt;li&gt;A-A-P - Python based build tool&lt;/li&gt;
&lt;li&gt;Rake (Apache Builder) - Ruby&lt;/li&gt;
&lt;li&gt;Leiningen for Clojure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is gulpjs and gruntjs for Javascript too.&lt;/p&gt;

&lt;h1 id=&#34;gradle-and-android-studio&#34;&gt;Gradle and Android Studio&lt;/h1&gt;

&lt;p&gt;You used to use Eclipse to develop for Android. Later, the main IDE changed to Android Studio and together with it came gradle. Why?&lt;/p&gt;

&lt;p&gt;I would say build systems stay true to the way of using commandline programs to achieve some task. This stackoverflow &lt;a href=&#34;http://stackoverflow.com/questions/16754643/what-is-gradle-in-android-studio&#34;&gt;post&lt;/a&gt; explains it nicely. Basically, it was difficult for you figure out how to build an apk without Eclipse. Google decided to make an Android plugin for gradle, thus, now its easier to make apks without an IDE. Furthermore, you can customize the way you want your package built. If you like to have resources put in a non-conventional folder, go ahead, just update the build script.&lt;/p&gt;

&lt;h1 id=&#34;gradle-init&#34;&gt;Gradle init&lt;/h1&gt;

&lt;p&gt;My motivation to use gradle came from the need to test some code or libraries without starting a fully fledged IDE. I discovered a useful plugin gradle has called the &lt;code&gt;Build Init Plugin&lt;/code&gt;. (&lt;a href=&#34;https://docs.gradle.org/current/userguide/build_init_plugin.html&#34;&gt;link&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gradle init --type java-library
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With then one command I have a basic Java project setup and I can use something like Sublime Text and get going. As a bonus JUnit is included by default.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Agile Software Development</title>
      <link>https://robin-lee.github.io/blog/agile-software-development/</link>
      <pubDate>Sat, 23 Jul 2016 16:29:59 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/agile-software-development/</guid>
      <description>

&lt;h1 id=&#34;what-is-agile-software-development&#34;&gt;What is Agile Software Development?&lt;/h1&gt;

&lt;p&gt;It refers to adopting a set of practices or principles while developing software.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In early 2001, the Agile Alliance met to outine the values and principles that would allow software teams work together and respond to change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Agile Software Development, Principles, Patterns and Practices.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;things-that-got-my-attention&#34;&gt;Things that got my attention&lt;/h1&gt;

&lt;p&gt;1.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Agiles processes promote sustainable development. The sponsors, developers and users should be able to maintain constant pace indefinitely.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An agile project is not run like a 50-yard dash; it is run like a marathon. They run at a fast, sustainable pace. Running too fast often leads to burnout, shortcuts and debacle. &amp;hellip; A team is not allowed to work overtime. The only exception is the last week in a release.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Splitting, Spiking and Velocity. Any story too big should be split in stories that aren&amp;rsquo;t too big. After splitting, it should be reestiamted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Velocity is something like &amp;ldquo;2 days per story point&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-&amp;gt; Users can securely transfer money into, out of, and between their accounts.

becomes

-&amp;gt; Users can login
-&amp;gt; Users can logout
-&amp;gt; Users can deposit money into their account
-&amp;gt; Users can withdraw money from their account
-&amp;gt; Users can transfer money from their account to another account
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Intentional programming. You state your intent in a test before implementing it, making your intent as simple and readable as possible. The act of writing tests first is an act of discerning between design decisions. WumpusGame example: Integers instead of room object or game world?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;White box test: A test that knows and depends on its internal structure. (unit)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Black box test: A test that does&lt;/em&gt; &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;know or depend on its internal structure. (acceptance)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Always practice refactoring for every module you write and every module you maintain.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>SOLID Principles</title>
      <link>https://robin-lee.github.io/blog/solid-principles/</link>
      <pubDate>Sat, 23 Jul 2016 14:46:47 +0200</pubDate>
      
      <guid>https://robin-lee.github.io/blog/solid-principles/</guid>
      <description>

&lt;p&gt;A set of principles to design or write &lt;strong&gt;classes&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;single-responsibility-principle&#34;&gt;Single Responsibility Principle&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;A class should have one, and only one, reason to change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;open-closed-principle&#34;&gt;Open - Closed Principle&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;You should be able to extend a classes behavior, without modifying it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;liskov-substitution-principle&#34;&gt;Liskov Substitution Principle&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Derived classes must be substitutable for their base classes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;interface-segregation-principle&#34;&gt;Interface Segregation Principle&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Make fine grained interfaces that are client specific.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;dependency-inversion-principle&#34;&gt;Dependency Inversion Principle&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Depend on abstractions, not on concretions.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>