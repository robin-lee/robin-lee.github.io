<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Robin Lee</title>
    <link>https://robin-lee.github.io/tags/reactjs/index.xml</link>
    <description>Recent content on Robin Lee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://robin-lee.github.io/tags/reactjs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>React Basics</title>
      <link>https://robin-lee.github.io/blog/2017/03/react-basics/</link>
      <pubDate>Thu, 30 Mar 2017 17:40:03 +0800</pubDate>
      
      <guid>https://robin-lee.github.io/blog/2017/03/react-basics/</guid>
      <description>

&lt;p&gt;Edit 14/6/17: Fix formatting.&lt;/p&gt;

&lt;p&gt;ReactJS to learn React Native. Essentially, trying to follow the learning path here: &lt;a href=&#34;https://reactjs.co/react-native-convention/&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obviously, certain parts will be prioritised.&lt;/p&gt;

&lt;h1 id=&#34;skeleton&#34;&gt;Skeleton&lt;/h1&gt;

&lt;p&gt;App.js&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;;

// Component with Stateless
class App extends React.Component {
    render() {
        return &amp;lt;h1&amp;gt;Hello Guys&amp;lt;/h1&amp;gt;
    }
}

// Stateless component
// const App = () =&amp;gt; &amp;lt;h1&amp;gt;Hello Eggheads&amp;lt;/h1&amp;gt;

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;index.html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Intro&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script src=&amp;quot;index.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main.js&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import App from &#39;./App&#39;;

ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;components&#34;&gt;Components&lt;/h1&gt;

&lt;h2 id=&#34;base&#34;&gt;Base&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;import { Component } from &#39;react&#39;

class Thing extends Component {
  render() {
    return &amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;stateless-function&#34;&gt;Stateless function&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;const Thing = () =&amp;gt; &amp;lt;h1&amp;gt;Hello Darth Vader!&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;loading-children&#34;&gt;Loading children&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;const Thing = (props) =&amp;gt; &amp;lt;h1&amp;gt;Hello Darth Vader! {props.children}&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;owner-ownee&#34;&gt;Owner, Ownee&lt;/h2&gt;

&lt;p&gt;Entry in input updates h1.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Thing extends Component {
  constructor() {
    super()
    this.state = {
      stuff: &amp;quot;this is the state stuff&amp;quot;
    }
  }

  update(e) {
    //update with input value
    this.setState({stuff: e.target.value})
  }

  render() {
    return (
        &amp;lt;div&amp;gt;
          &amp;lt;h1&amp;gt;{this.state.stuff}&amp;lt;/h1&amp;gt;
          &amp;lt;input type=&amp;quot;text&amp;quot; onChange={this.update.bind(this)} /&amp;gt;
        &amp;lt;/div&amp;gt;
      )
  }
}

export default Thing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Multiple widgets access parent update method.
Notice the update prop for Widget in the render method of Thing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Thing extends Component {
  constructor() {
    super()
    this.state = {
      stuff: &amp;quot;this is the state stuff&amp;quot;
    }
  }

  update(e) {
    //update with input value
    this.setState({stuff: e.target.value})
  }

  render() {
    return (
        &amp;lt;div&amp;gt;
          &amp;lt;h1&amp;gt;{this.state.stuff}&amp;lt;/h1&amp;gt;
          &amp;lt;Widget type=&amp;quot;text&amp;quot; update={this.update.bind(this)} /&amp;gt;
          &amp;lt;Widget type=&amp;quot;text&amp;quot; update={this.update.bind(this)} /&amp;gt;
          &amp;lt;Widget type=&amp;quot;text&amp;quot; update={this.update.bind(this)} /&amp;gt;
        &amp;lt;/div&amp;gt;
      )
  }
}

const Widget = (props) =&amp;gt;
&amp;lt;input type=&amp;quot;text&amp;quot; onChange={props.update} /&amp;gt;

export default Thing
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;validation&#34;&gt;Validation&lt;/h1&gt;

&lt;h2 id=&#34;default-validation-proptypes&#34;&gt;Default validation propTypes&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;const Thing extends Component {

  render() {
    let stuff = this.props.stuff
    return (
        &amp;lt;h1&amp;gt;{stuff}&amp;lt;/h1&amp;gt;
      )
  }
}

Thing.propTypes = {
  stuff: React.PropTypes.string,
  cat: React.PropTypes.number.isRequired
}

Thing.defaultProps = {
  stuff: &amp;quot;this is the default props&amp;quot;
}

export default Thing


//App.js render
&amp;lt;Thing cat={42} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;custom-validation&#34;&gt;Custom Validation&lt;/h2&gt;

&lt;p&gt;Instead of returning react propType, return a custom function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Thing extends Component {

  render() {
    return (
        &amp;lt;Title info=&amp;quot;important info!&amp;quot;/&amp;gt;
      )
  }
}

const Title = (props) =&amp;gt; &amp;lt;h1&amp;gt;Title: {props.info}&amp;lt;/h1&amp;gt;

Title.propTypes = {
  text(props, propName, component) {
    if(!(propName in props)) {
      //ensure prop exists
      // `` means evaluate variable in string
      return new Error(`missing ${propName}`)
    }
    if(props[propName].length &amp;lt; 6) {
      return new Error(`${propName} is too short.`)
    }
  }
}


export default Thing
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;refs-or-references&#34;&gt;Refs or References&lt;/h1&gt;

&lt;p&gt;Refs are a way for us to reference a node or an &lt;strong&gt;instance&lt;/strong&gt; of a component.
Ref simply returns the &lt;em&gt;node&lt;/em&gt; we are referencing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class App extends React.Component {
  constructor() {
    super();
    this.state = { a: &#39;&#39;}
  }

  update() {
    this.setState({
      a: this.a.value,
      b: this.refs.labelForInput2.value
      })
  }

  render() {
    return(
      &amp;lt;div&amp;gt;
        &amp;lt;input
          ref={ node =&amp;gt; this.a = node }
          type=&amp;quot;text&amp;quot;
          onChange={this.update.bind(this)}
        /&amp;gt;
        &amp;lt;p&amp;gt; {this.state.a} &amp;lt;/p&amp;gt;
        &amp;lt;input
          ref=&amp;quot;labelForInput2&amp;quot;
          type=&amp;quot;text&amp;quot;
          onChange={this.update.bind(this)}
        /&amp;gt;
        &amp;lt;p&amp;gt; {this.state.b} &amp;lt;/p&amp;gt;        
      &amp;lt;/div&amp;gt;
      )
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;reference-an-instance-of-another-component&#34;&gt;Reference an instance of another component&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;import ReactDOM from &#39;react-dom&#39;;

update() {
  this.setState({
    a: this.a.value,
    b: this.refs.labelForInput2.value,
    c: this.c.refs.inputRef.value
  })
}

/**
 * If there is only 1 element in render() for the other component.
 * c: ReactDOM.findDOMNode(this.c).value works.
 */


render() {
  return(
    &amp;lt;div&amp;gt;
      &amp;lt;input
        ref={ node =&amp;gt; this.a = node }
        type=&amp;quot;text&amp;quot;
        onChange={this.update.bind(this)}
      /&amp;gt;
      &amp;lt;p&amp;gt; {this.state.a} &amp;lt;/p&amp;gt;
      &amp;lt;input
        ref=&amp;quot;labelForInput2&amp;quot;
        type=&amp;quot;text&amp;quot;
        onChange={this.update.bind(this)}
      /&amp;gt;
      &amp;lt;p&amp;gt; {this.state.b} &amp;lt;/p&amp;gt;
      &amp;lt;input
        ref={ component =&amp;gt; this.c = component }
        update={this.update.bind(this)}
      /&amp;gt;
      &amp;lt;p&amp;gt; {this.state.c} &amp;lt;/p&amp;gt;            
    &amp;lt;/div&amp;gt;
    )
  })

class Input extends React.Component {
  render() {
    return (
        &amp;lt;div&amp;gt;&amp;lt;input ref=&amp;quot;inputRef&amp;quot; type=&amp;quot;text&amp;quot; onChange={this.props.update}/&amp;gt;&amp;lt;/div&amp;gt;
      )
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;component-lifecycle&#34;&gt;Component Lifecycle&lt;/h1&gt;

&lt;p&gt;//Note:
&lt;code&gt;getInitialState&lt;/code&gt; deprecated in favor of declaring initial state value in constructor.
&lt;a href=&#34;http://stackoverflow.com/questions/33447149/class-extends-react-component-cant-use-getinitialstate-in-react&#34;&gt;Link&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export default class Loginform extends React.Component {
  constructor(props, context) {
    super(props, context);

    this.state = {
      name: &#39;&#39;,
      password: &#39;&#39;
    };
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example (rough order):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;componentWillMount&lt;/li&gt;
&lt;li&gt;render&lt;/li&gt;
&lt;li&gt;componentDidMount&lt;/li&gt;
&lt;li&gt;componentWillUnmount&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;class App extends React.Component {
  constructor() {
    super()
    this.state = {gryffindorPoints: 0}
    this.update = this.update.bind(this)
  }

  update() {
    this.setState({ gryffindorPoints: this.state.gryffindorPoints + 1})
  }

  componentWillMount() {
    //only fires once for component
    console.log(&#39;componentWillMount&#39;)

    //can set state before component is rendered
    this.setState({multiplier: 2})
  }

  render() {
    console.log(&#39;render&#39;)
    return &amp;lt;button onClick={this.update&amp;gt;{this.state.gryffindorPoints}&amp;lt;/button&amp;gt;
  }

  componentDidMount() {
    //fires once component mounted to DOM
    console.log(&#39;componentDidMount&#39;)

    //multiply every 500ms
    this.increment = setInterval(this.update, 500)
  }  

   componentWillUnmount() {
     //Called when ReactDOM.unmountComponentAtNode(...) is fired.
     console.log(&#39;componentWillUnmount&#39;)

     //can use to clean update when unmounting
     clearInterval(this.increment)
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;component-update-lifecycle&#34;&gt;Component update lifecycle&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;

class App extends React.Component {
  constructor(){
    super();
    this.update = this.update.bind(this);
    this.state = {increasing: false}
  }
  update(){
    ReactDOM.render(
      &amp;lt;App val={this.props.val+1} /&amp;gt;,
      document.getElementById(&#39;app&#39;)
    );
  }
  componentWillReceiveProps(nextProps){
    //new properties are coming in? then you have nextProps
    this.setState({increasing: nextProps.val &amp;gt; this.props.val})
  }
  shouldComponentUpdate(nextProps, nextState) {
    // does NOT prevent state or props from being updated.
    // only prevents re-render if not a multiple of 5.
    return nextProps.val % 5 === 0;
  }
  render(){
    console.log(this.state.increasing)
    return (
      &amp;lt;button onClick={this.update}&amp;gt;
        {this.props.val}
      &amp;lt;/button&amp;gt;)
  }
  componentDidUpdate(prevProps, prevState) {
    // just as the arguments say.
    console.log(&#39;prevProps&#39;, prevProps)
  }
}

App.defaultProps = { val: 0 }

export default App
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;dynamically-generated-components&#34;&gt;Dynamically generated components&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;;

class App extends React.Component {
  constructor() {
    super();
    this.state = {items: []}
  }

  componentWillMount() {
    fetch( &#39;http://swapi.co/api/people/?format=json&#39;)
      .then( response =&amp;gt; response.json() )
      .then( ({result: items}) =&amp;gt; this.setState({items}) )
  }

  filter(e) {
    //takes event of an input
    this.setState({filter: e.target.value})
  }

  render() {
    let items = this.state.items;
    if(this.state.filter) {
      items = items.filter( item =&amp;gt;
        item.name.toLowerCase()
        .includes(this.state.filter.toLowerCase()))
    }

    //&amp;quot;key&amp;quot; is amongst siblings. therefore the &amp;quot;key&amp;quot; tag is placed here.
    //In the context of the Person h4 component it has no siblings.
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; onChange={this.filter.bind(this)} /&amp;gt;
        {items.map(item =&amp;gt;
          &amp;lt;Person key={item.name} person={item} /&amp;gt;)}
      &amp;lt;/div&amp;gt;
      )
  }
}

const Person = (props) =&amp;gt; &amp;lt;h4&amp;gt; {props.person.name} &amp;lt;/h4&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;higher-order-components&#34;&gt;Higher order components&lt;/h1&gt;

&lt;p&gt;Purpose of higher component is to share functionality or information between multiple components.&lt;/p&gt;

&lt;p&gt;Sole function is to take in a component and return a component.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const HOC = (InnerComponent) =&amp;gt; class extends React.Component {
  constructor() {
    super();
    this.state = {count: 0}
  }

  update() {
    this.setState({count: this.state.count + 1})
  }

  componentWillMount() {
    console.log(&#39;HOC will mount&#39;)
  }


  render() {

    // &amp;quot;...&amp;quot; spread this.props into this component
    // pass the props right on through

    //here we are passing props, state and update function to the component
    return(
      &amp;lt;InnerComponent
        {...this.props}
        {...this.state}
        update={this.update.bind(this)}
      /&amp;gt;
      )
  }
}

//displays props and state passed to it.
//uses function passed to it for onClick event
const Button = HOC((props) =&amp;gt; &amp;lt;button onClick={props.update}&amp;gt;{props.children} , {props.count}&amp;lt;/button&amp;gt;)

class Label extends React.Component {
  componentWillMount() {
    console.log(&#39;Label will mount&#39;)
  }

  render() {
    return (
      &amp;lt;label onMouseMove={this.props.update}&amp;gt;
        {this.props.children} , {this.props.count}
      &amp;lt;/label&amp;gt;
      )
  }
}

const LabelHOC = HOC(Label)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;jsx-deep-dive&#34;&gt;JSX Deep dive&lt;/h1&gt;

&lt;p&gt;JSX deep dive with babel &lt;em&gt;transpiler&lt;/em&gt; to es2015.&lt;/p&gt;

&lt;p&gt;Does not work because you are returning 2 functions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const App = (prop) =&amp;gt; {
  return (
    &amp;lt;App /&amp;gt;
    &amp;lt;App /&amp;gt;
    )
}

// with a single &amp;lt;App /&amp;gt; equivalent to
var App = function App(props) {
  return React.createElement(App, null);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wrap in a div tag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;div&amp;gt;
  &amp;lt;App /&amp;gt;
  &amp;lt;App /&amp;gt;
&amp;lt;/div&amp;gt;

var App = function App(props) {
  return React.createElement(
    &amp;quot;div&amp;quot;,
    null,
    React.createElement(App, null),
    React.createElement(App, null)
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With props and stuff.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var coolStyles = {
  backgroundColor: &#39;purple&#39;,
  color: &#39;white&#39;
}

&amp;lt;div style={coolStyles}&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;
    notrendered=&amp;quot;x&amp;quot; // include hyphen or use data-something convention for component to be rendered
    onClick={update} //interpolation requires curly braces
  &amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;

React.createElement(
  &amp;quot;div&amp;quot;,
  { style: coolStyles },
  React.createElement(
    &amp;quot;a&amp;quot;,
    { href: &amp;quot;#&amp;quot;,
    notrendered: &amp;quot;x&amp;quot;,
    onClick: update
    })
  );

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;children-utilities&#34;&gt;Children utilities&lt;/h1&gt;

&lt;p&gt;Might want iterate through children&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class App extends React.Component {
  render() {
    return (
      &amp;lt;Parent&amp;gt;
        &amp;lt;div className=&amp;quot;childA&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div className=&amp;quot;childB&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;/Parent&amp;gt;
      )
  }
}

class Parent extends React.Component {
  render() {
    //line below fails as this.props.childen is just a single object.
    //let items = this.props.children.map(child =&amp;gt; child)
    let items = React.Children
      .map(this.props.childen, child =&amp;gt; child)
    let items = React.Children
      .forEach(this.props.childen, child =&amp;gt; console.log(child.props.className))

    //let items = React.Children.toArray(this.props.children)

    //throws error because expecting only 1 child.
    //let items = React.Children.only(this.props.childen)

    console.log(items)
    return null
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;extend-functionality-of-children&#34;&gt;Extend functionality of children&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;this.props.children&lt;/code&gt; is just a descriptor of the children. You can&amp;rsquo;t actually modify anything.
So to modify you need to create new elements.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Button extends React.Component {
  constructor() {
    super();
    this.state = {selected: &#39;None&#39;}
  }

  selectItem(selected) {
    this.setState({selected})
  }

  render() {
    let fn = child =&amp;gt;
      React.cloneElement(child, {
          onClick: this.selectItem.bind(this, child.props.value)
        })

    let items = React.Children.map(this.props.children, fn);
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;h2&amp;gt; You have Selected: {this.state.selected} &amp;lt;/h2&amp;gt;
        {items}
      &amp;lt;/div&amp;gt;
      )
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;reusable-and-composable-components&#34;&gt;Reusable and Composable components&lt;/h1&gt;

&lt;p&gt;A key tenant of react.&lt;/p&gt;

&lt;p&gt;Old slider component using refs. Not really reusable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class App extends React.Component {
  constructor() {
    super();
    this.state =  {
      red: 0,
      green: 0,
      blue: 0
    }
    this.update = this.update.bind(this)
  }
  update(e) {
    this.setState({
      red: ReactDOM.findDomeNode(this.refs.red.refs.inp).value,
      green: ReactDOM.findDomeNode(this.refs.green.refs.inp).value,
      blue: ReactDOM.findDomeNode(this.refs.blue.refs.inp).value
      })
  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;Slider ref=&amp;quot;red&amp;quot; update={this.update} /&amp;gt;
        {this.state.red}
        &amp;lt;Slider ref=&amp;quot;green&amp;quot; update={this.update} /&amp;gt;
        {this.state.green}
        &amp;lt;Slider ref=&amp;quot;blue&amp;quot; update={this.update} /&amp;gt;
        {this.state.blue}                
      )
  }
}

class Slider extends React.Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
      &amp;lt;input ref=&amp;quot;inp&amp;quot; type=&amp;quot;range&amp;quot;
        min=&amp;quot;0&amp;quot;
        max=&amp;quot;255&amp;quot;
        onChange={this.props.update} /&amp;gt;
      &amp;lt;/div&amp;gt;
      )
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we try to create a more reusable component taking advantage of the similar apis between number input and range input.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class App extends React.Component {
  constructor() {
    super();
    this.state =  {
      red: 0,
      green: 0,
      blue: 0
    }
    this.update = this.update.bind(this)
  }
  update(e) {
    this.setState({
      red: ReactDOM.findDomeNode(this.refs.red.refs.inp).value,
      })
  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;NumInput
          ref=&amp;quot;red&amp;quot;
          type=&amp;quot;range&amp;quot;
          min={0}
          max={this.props.max}
          step={1}
          val={+this.state.red}
          label=&amp;quot;Red&amp;quot;
          update={this.update} /&amp;gt;     
      )
  }
}

class NumInput extends React.Component {
  render() {
    let label = this.props.label !== &#39;&#39; ?
      &amp;lt;label&amp;gt;{this.props.label}, {this.props.val}&amp;lt;/label&amp;gt;
    return (
      &amp;lt;div&amp;gt;
      &amp;lt;input ref=&amp;quot;inp&amp;quot;
        type={this.props.type}
        min={this.props.min}
        max={this.props.max}
        step={this.props.step}
        defaultValue={this.props.val}
        onChange={this.props.update} /&amp;gt;
        {label}
      &amp;lt;/div&amp;gt;
      )
  }
}

// Declare types (feels like input validation)
NumInput.propTypes = {
  min: React.PropTypes.number,
  max: React.PropTypes.number,
  step: React.PropTypes.number,
  val: React.PropTypes.number,
  label: React.PropTypes.string,
  update: React.PropTypes.func.isRequired, //update method type of func. is required.
  type: React.PropTypes.oneOf([&#39;number&#39;, &#39;range&#39;]) // type array and only accepts number or range.
}

NumInput.defaultProps = {
  min: 0,
  max: 0,
  step: 1,
  val: 0,
  label: &#39;&#39;,
  type: &#39;range&#39;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>